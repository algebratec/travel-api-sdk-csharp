/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelAvailabilityRequest
    /// </summary>
    [DataContract]
        public partial class HotelAvailabilityRequest :  IEquatable<HotelAvailabilityRequest>, IValidatableObject
    {
        /// <summary>
        /// language for description, default is EN
        /// </summary>
        /// <value>language for description, default is EN</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LanguageEnum
        {
            /// <summary>
            /// Enum EN for value: EN
            /// </summary>
            [EnumMember(Value = "EN")]
            EN = 1,
            /// <summary>
            /// Enum FR for value: FR
            /// </summary>
            [EnumMember(Value = "FR")]
            FR = 2,
            /// <summary>
            /// Enum AR for value: AR
            /// </summary>
            [EnumMember(Value = "AR")]
            AR = 3        }
        /// <summary>
        /// language for description, default is EN
        /// </summary>
        /// <value>language for description, default is EN</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelAvailabilityRequest" /> class.
        /// </summary>
        /// <param name="language">language for description, default is EN.</param>
        /// <param name="combination">combination.</param>
        /// <param name="stay">stay.</param>
        /// <param name="occupancies">occupancies.</param>
        /// <param name="filter">filter.</param>
        /// <param name="geolocation">geolocation.</param>
        public HotelAvailabilityRequest(LanguageEnum? language = default(LanguageEnum?), bool? combination = default(bool?), HotelAvailabilityRequestStay stay = default(HotelAvailabilityRequestStay), List<HotelAvailabilityRequestOccupancies> occupancies = default(List<HotelAvailabilityRequestOccupancies>), HotelAvailabilityRequestFilter filter = default(HotelAvailabilityRequestFilter), HotelAvailabilityRequestGeolocation geolocation = default(HotelAvailabilityRequestGeolocation))
        {
            this.Language = language;
            this.Combination = combination;
            this.Stay = stay;
            this.Occupancies = occupancies;
            this.Filter = filter;
            this.Geolocation = geolocation;
        }
        

        /// <summary>
        /// Gets or Sets Combination
        /// </summary>
        [DataMember(Name="combination", EmitDefaultValue=false)]
        public bool? Combination { get; set; }

        /// <summary>
        /// Gets or Sets Stay
        /// </summary>
        [DataMember(Name="stay", EmitDefaultValue=false)]
        public HotelAvailabilityRequestStay Stay { get; set; }

        /// <summary>
        /// Gets or Sets Occupancies
        /// </summary>
        [DataMember(Name="occupancies", EmitDefaultValue=false)]
        public List<HotelAvailabilityRequestOccupancies> Occupancies { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public HotelAvailabilityRequestFilter Filter { get; set; }

        /// <summary>
        /// Gets or Sets Geolocation
        /// </summary>
        [DataMember(Name="geolocation", EmitDefaultValue=false)]
        public HotelAvailabilityRequestGeolocation Geolocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelAvailabilityRequest {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Combination: ").Append(Combination).Append("\n");
            sb.Append("  Stay: ").Append(Stay).Append("\n");
            sb.Append("  Occupancies: ").Append(Occupancies).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HotelAvailabilityRequest);
        }

        /// <summary>
        /// Returns true if HotelAvailabilityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of HotelAvailabilityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelAvailabilityRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Combination == input.Combination ||
                    (this.Combination != null &&
                    this.Combination.Equals(input.Combination))
                ) && 
                (
                    this.Stay == input.Stay ||
                    (this.Stay != null &&
                    this.Stay.Equals(input.Stay))
                ) && 
                (
                    this.Occupancies == input.Occupancies ||
                    this.Occupancies != null &&
                    input.Occupancies != null &&
                    this.Occupancies.SequenceEqual(input.Occupancies)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.Geolocation == input.Geolocation ||
                    (this.Geolocation != null &&
                    this.Geolocation.Equals(input.Geolocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Combination != null)
                    hashCode = hashCode * 59 + this.Combination.GetHashCode();
                if (this.Stay != null)
                    hashCode = hashCode * 59 + this.Stay.GetHashCode();
                if (this.Occupancies != null)
                    hashCode = hashCode * 59 + this.Occupancies.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.Geolocation != null)
                    hashCode = hashCode * 59 + this.Geolocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
