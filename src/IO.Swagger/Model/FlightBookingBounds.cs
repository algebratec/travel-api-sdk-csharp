/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightBookingBounds
    /// </summary>
    [DataContract]
        public partial class FlightBookingBounds :  IEquatable<FlightBookingBounds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightBookingBounds" /> class.
        /// </summary>
        /// <param name="arrivalDate">arrivalDate.</param>
        /// <param name="arrivalLocation">arrivalLocation.</param>
        /// <param name="arrivalTime">arrivalTime.</param>
        /// <param name="bookingClass">bookingClass.</param>
        /// <param name="departureDate">departureDate.</param>
        /// <param name="departureLocation">departureLocation.</param>
        /// <param name="departureTime">departureTime.</param>
        /// <param name="destination">destination.</param>
        /// <param name="origin">origin.</param>
        /// <param name="segments">segments.</param>
        public FlightBookingBounds(string arrivalDate = default(string), FlightBookingArrivalLocation arrivalLocation = default(FlightBookingArrivalLocation), string arrivalTime = default(string), List<string> bookingClass = default(List<string>), string departureDate = default(string), FlightBookingArrivalLocation departureLocation = default(FlightBookingArrivalLocation), string departureTime = default(string), string destination = default(string), string origin = default(string), List<FlightBookingSegments> segments = default(List<FlightBookingSegments>))
        {
            this.ArrivalDate = arrivalDate;
            this.ArrivalLocation = arrivalLocation;
            this.ArrivalTime = arrivalTime;
            this.BookingClass = bookingClass;
            this.DepartureDate = departureDate;
            this.DepartureLocation = departureLocation;
            this.DepartureTime = departureTime;
            this.Destination = destination;
            this.Origin = origin;
            this.Segments = segments;
        }
        
        /// <summary>
        /// Gets or Sets ArrivalDate
        /// </summary>
        [DataMember(Name="arrival_date", EmitDefaultValue=false)]
        public string ArrivalDate { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalLocation
        /// </summary>
        [DataMember(Name="arrival_location", EmitDefaultValue=false)]
        public FlightBookingArrivalLocation ArrivalLocation { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalTime
        /// </summary>
        [DataMember(Name="arrival_time", EmitDefaultValue=false)]
        public string ArrivalTime { get; set; }

        /// <summary>
        /// Gets or Sets BookingClass
        /// </summary>
        [DataMember(Name="booking_class", EmitDefaultValue=false)]
        public List<string> BookingClass { get; set; }

        /// <summary>
        /// Gets or Sets DepartureDate
        /// </summary>
        [DataMember(Name="departure_date", EmitDefaultValue=false)]
        public string DepartureDate { get; set; }

        /// <summary>
        /// Gets or Sets DepartureLocation
        /// </summary>
        [DataMember(Name="departure_location", EmitDefaultValue=false)]
        public FlightBookingArrivalLocation DepartureLocation { get; set; }

        /// <summary>
        /// Gets or Sets DepartureTime
        /// </summary>
        [DataMember(Name="departure_time", EmitDefaultValue=false)]
        public string DepartureTime { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [DataMember(Name="segments", EmitDefaultValue=false)]
        public List<FlightBookingSegments> Segments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightBookingBounds {\n");
            sb.Append("  ArrivalDate: ").Append(ArrivalDate).Append("\n");
            sb.Append("  ArrivalLocation: ").Append(ArrivalLocation).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  BookingClass: ").Append(BookingClass).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  DepartureLocation: ").Append(DepartureLocation).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightBookingBounds);
        }

        /// <summary>
        /// Returns true if FlightBookingBounds instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightBookingBounds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightBookingBounds input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArrivalDate == input.ArrivalDate ||
                    (this.ArrivalDate != null &&
                    this.ArrivalDate.Equals(input.ArrivalDate))
                ) && 
                (
                    this.ArrivalLocation == input.ArrivalLocation ||
                    (this.ArrivalLocation != null &&
                    this.ArrivalLocation.Equals(input.ArrivalLocation))
                ) && 
                (
                    this.ArrivalTime == input.ArrivalTime ||
                    (this.ArrivalTime != null &&
                    this.ArrivalTime.Equals(input.ArrivalTime))
                ) && 
                (
                    this.BookingClass == input.BookingClass ||
                    this.BookingClass != null &&
                    input.BookingClass != null &&
                    this.BookingClass.SequenceEqual(input.BookingClass)
                ) && 
                (
                    this.DepartureDate == input.DepartureDate ||
                    (this.DepartureDate != null &&
                    this.DepartureDate.Equals(input.DepartureDate))
                ) && 
                (
                    this.DepartureLocation == input.DepartureLocation ||
                    (this.DepartureLocation != null &&
                    this.DepartureLocation.Equals(input.DepartureLocation))
                ) && 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    input.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArrivalDate != null)
                    hashCode = hashCode * 59 + this.ArrivalDate.GetHashCode();
                if (this.ArrivalLocation != null)
                    hashCode = hashCode * 59 + this.ArrivalLocation.GetHashCode();
                if (this.ArrivalTime != null)
                    hashCode = hashCode * 59 + this.ArrivalTime.GetHashCode();
                if (this.BookingClass != null)
                    hashCode = hashCode * 59 + this.BookingClass.GetHashCode();
                if (this.DepartureDate != null)
                    hashCode = hashCode * 59 + this.DepartureDate.GetHashCode();
                if (this.DepartureLocation != null)
                    hashCode = hashCode * 59 + this.DepartureLocation.GetHashCode();
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.Segments != null)
                    hashCode = hashCode * 59 + this.Segments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
