/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightAvailabilityRequest
    /// </summary>
    [DataContract]
        public partial class FlightAvailabilityRequest :  IEquatable<FlightAvailabilityRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Language
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LanguageEnum
        {
            /// <summary>
            /// Enum EN for value: EN
            /// </summary>
            [EnumMember(Value = "EN")]
            EN = 1,
            /// <summary>
            /// Enum FR for value: FR
            /// </summary>
            [EnumMember(Value = "FR")]
            FR = 2,
            /// <summary>
            /// Enum AR for value: AR
            /// </summary>
            [EnumMember(Value = "AR")]
            AR = 3        }
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// M &#x3D; ECONOMY STANDARD &lt;br&gt; Y &#x3D; ECONOMY &lt;br&gt; W &#x3D; ECONOMY PREMIUM &lt;br&gt; C &#x3D; BUSINESS &lt;br&gt; F &#x3D; FIRST
        /// </summary>
        /// <value>M &#x3D; ECONOMY STANDARD &lt;br&gt; Y &#x3D; ECONOMY &lt;br&gt; W &#x3D; ECONOMY PREMIUM &lt;br&gt; C &#x3D; BUSINESS &lt;br&gt; F &#x3D; FIRST</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CabinClassEnum
        {
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 2,
            /// <summary>
            /// Enum W for value: W
            /// </summary>
            [EnumMember(Value = "W")]
            W = 3,
            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 4,
            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 5        }
        /// <summary>
        /// M &#x3D; ECONOMY STANDARD &lt;br&gt; Y &#x3D; ECONOMY &lt;br&gt; W &#x3D; ECONOMY PREMIUM &lt;br&gt; C &#x3D; BUSINESS &lt;br&gt; F &#x3D; FIRST
        /// </summary>
        /// <value>M &#x3D; ECONOMY STANDARD &lt;br&gt; Y &#x3D; ECONOMY &lt;br&gt; W &#x3D; ECONOMY PREMIUM &lt;br&gt; C &#x3D; BUSINESS &lt;br&gt; F &#x3D; FIRST</value>
        [DataMember(Name="cabinClass", EmitDefaultValue=false)]
        public CabinClassEnum? CabinClass { get; set; }
        /// <summary>
        /// Defines TripType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TripTypeEnum
        {
            /// <summary>
            /// Enum Rt for value: rt
            /// </summary>
            [EnumMember(Value = "rt")]
            Rt = 1,
            /// <summary>
            /// Enum Ow for value: ow
            /// </summary>
            [EnumMember(Value = "ow")]
            Ow = 2,
            /// <summary>
            /// Enum Md for value: md
            /// </summary>
            [EnumMember(Value = "md")]
            Md = 3        }
        /// <summary>
        /// Gets or Sets TripType
        /// </summary>
        [DataMember(Name="tripType", EmitDefaultValue=false)]
        public TripTypeEnum? TripType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightAvailabilityRequest" /> class.
        /// </summary>
        /// <param name="language">language.</param>
        /// <param name="bounds">bounds.</param>
        /// <param name="cabinClass">M &#x3D; ECONOMY STANDARD &lt;br&gt; Y &#x3D; ECONOMY &lt;br&gt; W &#x3D; ECONOMY PREMIUM &lt;br&gt; C &#x3D; BUSINESS &lt;br&gt; F &#x3D; FIRST.</param>
        /// <param name="tripType">tripType.</param>
        /// <param name="flexible">flexible.</param>
        /// <param name="range">range.</param>
        /// <param name="nrOfAdult">nrOfAdult.</param>
        /// <param name="nrOfChild">nrOfChild.</param>
        /// <param name="nrOfInfant">nrOfInfant.</param>
        /// <param name="nrOfInfantWithSeat">nrOfInfantWithSeat.</param>
        /// <param name="nrOfSenior">nrOfSenior.</param>
        /// <param name="nrOfYouth">nrOfYouth.</param>
        /// <param name="requestedFlightNonStop">requestedFlightNonStop.</param>
        /// <param name="requestedMultiCity">requestedMultiCity.</param>
        public FlightAvailabilityRequest(LanguageEnum? language = default(LanguageEnum?), List<FlightAvailibilityRequestBound> bounds = default(List<FlightAvailibilityRequestBound>), CabinClassEnum? cabinClass = default(CabinClassEnum?), TripTypeEnum? tripType = default(TripTypeEnum?), bool? flexible = default(bool?), int? range = default(int?), int? nrOfAdult = default(int?), int? nrOfChild = default(int?), int? nrOfInfant = default(int?), int? nrOfInfantWithSeat = default(int?), int? nrOfSenior = default(int?), int? nrOfYouth = default(int?), bool? requestedFlightNonStop = default(bool?), bool? requestedMultiCity = default(bool?))
        {
            this.Language = language;
            this.Bounds = bounds;
            this.CabinClass = cabinClass;
            this.TripType = tripType;
            this.Flexible = flexible;
            this.Range = range;
            this.NrOfAdult = nrOfAdult;
            this.NrOfChild = nrOfChild;
            this.NrOfInfant = nrOfInfant;
            this.NrOfInfantWithSeat = nrOfInfantWithSeat;
            this.NrOfSenior = nrOfSenior;
            this.NrOfYouth = nrOfYouth;
            this.RequestedFlightNonStop = requestedFlightNonStop;
            this.RequestedMultiCity = requestedMultiCity;
        }
        

        /// <summary>
        /// Gets or Sets Bounds
        /// </summary>
        [DataMember(Name="bounds", EmitDefaultValue=false)]
        public List<FlightAvailibilityRequestBound> Bounds { get; set; }



        /// <summary>
        /// Gets or Sets Flexible
        /// </summary>
        [DataMember(Name="flexible", EmitDefaultValue=false)]
        public bool? Flexible { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public int? Range { get; set; }

        /// <summary>
        /// Gets or Sets NrOfAdult
        /// </summary>
        [DataMember(Name="nrOfAdult", EmitDefaultValue=false)]
        public int? NrOfAdult { get; set; }

        /// <summary>
        /// Gets or Sets NrOfChild
        /// </summary>
        [DataMember(Name="nrOfChild", EmitDefaultValue=false)]
        public int? NrOfChild { get; set; }

        /// <summary>
        /// Gets or Sets NrOfInfant
        /// </summary>
        [DataMember(Name="nrOfInfant", EmitDefaultValue=false)]
        public int? NrOfInfant { get; set; }

        /// <summary>
        /// Gets or Sets NrOfInfantWithSeat
        /// </summary>
        [DataMember(Name="nrOfInfantWithSeat", EmitDefaultValue=false)]
        public int? NrOfInfantWithSeat { get; set; }

        /// <summary>
        /// Gets or Sets NrOfSenior
        /// </summary>
        [DataMember(Name="nrOfSenior", EmitDefaultValue=false)]
        public int? NrOfSenior { get; set; }

        /// <summary>
        /// Gets or Sets NrOfYouth
        /// </summary>
        [DataMember(Name="nrOfYouth", EmitDefaultValue=false)]
        public int? NrOfYouth { get; set; }

        /// <summary>
        /// Gets or Sets RequestedFlightNonStop
        /// </summary>
        [DataMember(Name="requestedFlightNonStop", EmitDefaultValue=false)]
        public bool? RequestedFlightNonStop { get; set; }

        /// <summary>
        /// Gets or Sets RequestedMultiCity
        /// </summary>
        [DataMember(Name="requestedMultiCity", EmitDefaultValue=false)]
        public bool? RequestedMultiCity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightAvailabilityRequest {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Bounds: ").Append(Bounds).Append("\n");
            sb.Append("  CabinClass: ").Append(CabinClass).Append("\n");
            sb.Append("  TripType: ").Append(TripType).Append("\n");
            sb.Append("  Flexible: ").Append(Flexible).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  NrOfAdult: ").Append(NrOfAdult).Append("\n");
            sb.Append("  NrOfChild: ").Append(NrOfChild).Append("\n");
            sb.Append("  NrOfInfant: ").Append(NrOfInfant).Append("\n");
            sb.Append("  NrOfInfantWithSeat: ").Append(NrOfInfantWithSeat).Append("\n");
            sb.Append("  NrOfSenior: ").Append(NrOfSenior).Append("\n");
            sb.Append("  NrOfYouth: ").Append(NrOfYouth).Append("\n");
            sb.Append("  RequestedFlightNonStop: ").Append(RequestedFlightNonStop).Append("\n");
            sb.Append("  RequestedMultiCity: ").Append(RequestedMultiCity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightAvailabilityRequest);
        }

        /// <summary>
        /// Returns true if FlightAvailabilityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightAvailabilityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightAvailabilityRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Bounds == input.Bounds ||
                    this.Bounds != null &&
                    input.Bounds != null &&
                    this.Bounds.SequenceEqual(input.Bounds)
                ) && 
                (
                    this.CabinClass == input.CabinClass ||
                    (this.CabinClass != null &&
                    this.CabinClass.Equals(input.CabinClass))
                ) && 
                (
                    this.TripType == input.TripType ||
                    (this.TripType != null &&
                    this.TripType.Equals(input.TripType))
                ) && 
                (
                    this.Flexible == input.Flexible ||
                    (this.Flexible != null &&
                    this.Flexible.Equals(input.Flexible))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.NrOfAdult == input.NrOfAdult ||
                    (this.NrOfAdult != null &&
                    this.NrOfAdult.Equals(input.NrOfAdult))
                ) && 
                (
                    this.NrOfChild == input.NrOfChild ||
                    (this.NrOfChild != null &&
                    this.NrOfChild.Equals(input.NrOfChild))
                ) && 
                (
                    this.NrOfInfant == input.NrOfInfant ||
                    (this.NrOfInfant != null &&
                    this.NrOfInfant.Equals(input.NrOfInfant))
                ) && 
                (
                    this.NrOfInfantWithSeat == input.NrOfInfantWithSeat ||
                    (this.NrOfInfantWithSeat != null &&
                    this.NrOfInfantWithSeat.Equals(input.NrOfInfantWithSeat))
                ) && 
                (
                    this.NrOfSenior == input.NrOfSenior ||
                    (this.NrOfSenior != null &&
                    this.NrOfSenior.Equals(input.NrOfSenior))
                ) && 
                (
                    this.NrOfYouth == input.NrOfYouth ||
                    (this.NrOfYouth != null &&
                    this.NrOfYouth.Equals(input.NrOfYouth))
                ) && 
                (
                    this.RequestedFlightNonStop == input.RequestedFlightNonStop ||
                    (this.RequestedFlightNonStop != null &&
                    this.RequestedFlightNonStop.Equals(input.RequestedFlightNonStop))
                ) && 
                (
                    this.RequestedMultiCity == input.RequestedMultiCity ||
                    (this.RequestedMultiCity != null &&
                    this.RequestedMultiCity.Equals(input.RequestedMultiCity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Bounds != null)
                    hashCode = hashCode * 59 + this.Bounds.GetHashCode();
                if (this.CabinClass != null)
                    hashCode = hashCode * 59 + this.CabinClass.GetHashCode();
                if (this.TripType != null)
                    hashCode = hashCode * 59 + this.TripType.GetHashCode();
                if (this.Flexible != null)
                    hashCode = hashCode * 59 + this.Flexible.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.NrOfAdult != null)
                    hashCode = hashCode * 59 + this.NrOfAdult.GetHashCode();
                if (this.NrOfChild != null)
                    hashCode = hashCode * 59 + this.NrOfChild.GetHashCode();
                if (this.NrOfInfant != null)
                    hashCode = hashCode * 59 + this.NrOfInfant.GetHashCode();
                if (this.NrOfInfantWithSeat != null)
                    hashCode = hashCode * 59 + this.NrOfInfantWithSeat.GetHashCode();
                if (this.NrOfSenior != null)
                    hashCode = hashCode * 59 + this.NrOfSenior.GetHashCode();
                if (this.NrOfYouth != null)
                    hashCode = hashCode * 59 + this.NrOfYouth.GetHashCode();
                if (this.RequestedFlightNonStop != null)
                    hashCode = hashCode * 59 + this.RequestedFlightNonStop.GetHashCode();
                if (this.RequestedMultiCity != null)
                    hashCode = hashCode * 59 + this.RequestedMultiCity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
