/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightAirportAutocomplete
    /// </summary>
    [DataContract]
        public partial class FlightAirportAutocomplete :  IEquatable<FlightAirportAutocomplete>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightAirportAutocomplete" /> class.
        /// </summary>
        /// <param name="cityCode">cityCode.</param>
        /// <param name="cityName">cityName.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="countryName">countryName.</param>
        /// <param name="display">display.</param>
        /// <param name="iata">iata.</param>
        /// <param name="name">name.</param>
        /// <param name="numberOfAirportsInTheCity">numberOfAirportsInTheCity.</param>
        public FlightAirportAutocomplete(string cityCode = default(string), string cityName = default(string), string countryCode = default(string), string countryName = default(string), string display = default(string), string iata = default(string), string name = default(string), int? numberOfAirportsInTheCity = default(int?))
        {
            this.CityCode = cityCode;
            this.CityName = cityName;
            this.CountryCode = countryCode;
            this.CountryName = countryName;
            this.Display = display;
            this.Iata = iata;
            this.Name = name;
            this.NumberOfAirportsInTheCity = numberOfAirportsInTheCity;
        }
        
        /// <summary>
        /// Gets or Sets CityCode
        /// </summary>
        [DataMember(Name="city_code", EmitDefaultValue=false)]
        public string CityCode { get; set; }

        /// <summary>
        /// Gets or Sets CityName
        /// </summary>
        [DataMember(Name="city_name", EmitDefaultValue=false)]
        public string CityName { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name="country_name", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name="display", EmitDefaultValue=false)]
        public string Display { get; set; }

        /// <summary>
        /// Gets or Sets Iata
        /// </summary>
        [DataMember(Name="iata", EmitDefaultValue=false)]
        public string Iata { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfAirportsInTheCity
        /// </summary>
        [DataMember(Name="number_of_airports_in_the_city", EmitDefaultValue=false)]
        public int? NumberOfAirportsInTheCity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightAirportAutocomplete {\n");
            sb.Append("  CityCode: ").Append(CityCode).Append("\n");
            sb.Append("  CityName: ").Append(CityName).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Iata: ").Append(Iata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberOfAirportsInTheCity: ").Append(NumberOfAirportsInTheCity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightAirportAutocomplete);
        }

        /// <summary>
        /// Returns true if FlightAirportAutocomplete instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightAirportAutocomplete to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightAirportAutocomplete input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CityCode == input.CityCode ||
                    (this.CityCode != null &&
                    this.CityCode.Equals(input.CityCode))
                ) && 
                (
                    this.CityName == input.CityName ||
                    (this.CityName != null &&
                    this.CityName.Equals(input.CityName))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.Display == input.Display ||
                    (this.Display != null &&
                    this.Display.Equals(input.Display))
                ) && 
                (
                    this.Iata == input.Iata ||
                    (this.Iata != null &&
                    this.Iata.Equals(input.Iata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NumberOfAirportsInTheCity == input.NumberOfAirportsInTheCity ||
                    (this.NumberOfAirportsInTheCity != null &&
                    this.NumberOfAirportsInTheCity.Equals(input.NumberOfAirportsInTheCity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CityCode != null)
                    hashCode = hashCode * 59 + this.CityCode.GetHashCode();
                if (this.CityName != null)
                    hashCode = hashCode * 59 + this.CityName.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.Display != null)
                    hashCode = hashCode * 59 + this.Display.GetHashCode();
                if (this.Iata != null)
                    hashCode = hashCode * 59 + this.Iata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NumberOfAirportsInTheCity != null)
                    hashCode = hashCode * 59 + this.NumberOfAirportsInTheCity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
