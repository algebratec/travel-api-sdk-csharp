/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightPaxTypePrice
    /// </summary>
    [DataContract]
        public partial class FlightPaxTypePrice :  IEquatable<FlightPaxTypePrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightPaxTypePrice" /> class.
        /// </summary>
        /// <param name="agencyMarkup">agencyMarkup.</param>
        /// <param name="number">number.</param>
        /// <param name="platformMarkup">platformMarkup.</param>
        /// <param name="tax">tax.</param>
        /// <param name="total">total.</param>
        public FlightPaxTypePrice(decimal? agencyMarkup = default(decimal?), int? number = default(int?), decimal? platformMarkup = default(decimal?), int? tax = default(int?), int? total = default(int?))
        {
            this.AgencyMarkup = agencyMarkup;
            this.Number = number;
            this.PlatformMarkup = platformMarkup;
            this.Tax = tax;
            this.Total = total;
        }
        
        /// <summary>
        /// Gets or Sets AgencyMarkup
        /// </summary>
        [DataMember(Name="agency_markup", EmitDefaultValue=false)]
        public decimal? AgencyMarkup { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets PlatformMarkup
        /// </summary>
        [DataMember(Name="platform_markup", EmitDefaultValue=false)]
        public decimal? PlatformMarkup { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public int? Tax { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightPaxTypePrice {\n");
            sb.Append("  AgencyMarkup: ").Append(AgencyMarkup).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PlatformMarkup: ").Append(PlatformMarkup).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightPaxTypePrice);
        }

        /// <summary>
        /// Returns true if FlightPaxTypePrice instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightPaxTypePrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightPaxTypePrice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgencyMarkup == input.AgencyMarkup ||
                    (this.AgencyMarkup != null &&
                    this.AgencyMarkup.Equals(input.AgencyMarkup))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.PlatformMarkup == input.PlatformMarkup ||
                    (this.PlatformMarkup != null &&
                    this.PlatformMarkup.Equals(input.PlatformMarkup))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgencyMarkup != null)
                    hashCode = hashCode * 59 + this.AgencyMarkup.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.PlatformMarkup != null)
                    hashCode = hashCode * 59 + this.PlatformMarkup.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
