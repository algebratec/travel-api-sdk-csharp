/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightTraveller
    /// </summary>
    [DataContract]
        public partial class FlightTraveller : FlightBaseTraveller,  IEquatable<FlightTraveller>, IValidatableObject
    {
        /// <summary>
        /// ADT &#x3D; Adult &lt;br&gt; CHD &#x3D; Child &lt;br&gt; INF &#x3D; Infant &lt;br&gt; INS &#x3D; Infant with seat &lt;br&gt; YTH &#x3D; Youth &lt;br&gt; SNR &#x3D; Senior
        /// </summary>
        /// <value>ADT &#x3D; Adult &lt;br&gt; CHD &#x3D; Child &lt;br&gt; INF &#x3D; Infant &lt;br&gt; INS &#x3D; Infant with seat &lt;br&gt; YTH &#x3D; Youth &lt;br&gt; SNR &#x3D; Senior</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum ADT for value: ADT
            /// </summary>
            [EnumMember(Value = "ADT")]
            ADT = 1,
            /// <summary>
            /// Enum CHD for value: CHD
            /// </summary>
            [EnumMember(Value = "CHD")]
            CHD = 2,
            /// <summary>
            /// Enum INF for value: INF
            /// </summary>
            [EnumMember(Value = "INF")]
            INF = 3,
            /// <summary>
            /// Enum INS for value: INS
            /// </summary>
            [EnumMember(Value = "INS")]
            INS = 4,
            /// <summary>
            /// Enum YTH for value: YTH
            /// </summary>
            [EnumMember(Value = "YTH")]
            YTH = 5,
            /// <summary>
            /// Enum SNR for value: SNR
            /// </summary>
            [EnumMember(Value = "SNR")]
            SNR = 6        }
        /// <summary>
        /// ADT &#x3D; Adult &lt;br&gt; CHD &#x3D; Child &lt;br&gt; INF &#x3D; Infant &lt;br&gt; INS &#x3D; Infant with seat &lt;br&gt; YTH &#x3D; Youth &lt;br&gt; SNR &#x3D; Senior
        /// </summary>
        /// <value>ADT &#x3D; Adult &lt;br&gt; CHD &#x3D; Child &lt;br&gt; INF &#x3D; Infant &lt;br&gt; INS &#x3D; Infant with seat &lt;br&gt; YTH &#x3D; Youth &lt;br&gt; SNR &#x3D; Senior</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// BBML &#x3D; INFANT/BABY FOOD &lt;br&gt; CHML &#x3D; CHILD MEAL &lt;br&gt; MOML &#x3D; HALAL MEAL &lt;br&gt; VGML &#x3D; VEGETARIAN MEAL &lt;br&gt; WCHR &#x3D; Wheelchair &lt;br&gt; WCHS &#x3D; Wheelchair with assistance &lt;br&gt; WCHC &#x3D; Passenger is completely motionless
        /// </summary>
        /// <value>BBML &#x3D; INFANT/BABY FOOD &lt;br&gt; CHML &#x3D; CHILD MEAL &lt;br&gt; MOML &#x3D; HALAL MEAL &lt;br&gt; VGML &#x3D; VEGETARIAN MEAL &lt;br&gt; WCHR &#x3D; Wheelchair &lt;br&gt; WCHS &#x3D; Wheelchair with assistance &lt;br&gt; WCHC &#x3D; Passenger is completely motionless</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SpecialServiceEnum
        {
            /// <summary>
            /// Enum BBML for value: BBML
            /// </summary>
            [EnumMember(Value = "BBML")]
            BBML = 1,
            /// <summary>
            /// Enum CHML for value: CHML
            /// </summary>
            [EnumMember(Value = "CHML")]
            CHML = 2,
            /// <summary>
            /// Enum MOML for value: MOML
            /// </summary>
            [EnumMember(Value = "MOML")]
            MOML = 3,
            /// <summary>
            /// Enum VGML for value: VGML
            /// </summary>
            [EnumMember(Value = "VGML")]
            VGML = 4,
            /// <summary>
            /// Enum WCHR for value: WCHR
            /// </summary>
            [EnumMember(Value = "WCHR")]
            WCHR = 5,
            /// <summary>
            /// Enum WCHS for value: WCHS
            /// </summary>
            [EnumMember(Value = "WCHS")]
            WCHS = 6,
            /// <summary>
            /// Enum WCHC for value: WCHC
            /// </summary>
            [EnumMember(Value = "WCHC")]
            WCHC = 7        }
        /// <summary>
        /// BBML &#x3D; INFANT/BABY FOOD &lt;br&gt; CHML &#x3D; CHILD MEAL &lt;br&gt; MOML &#x3D; HALAL MEAL &lt;br&gt; VGML &#x3D; VEGETARIAN MEAL &lt;br&gt; WCHR &#x3D; Wheelchair &lt;br&gt; WCHS &#x3D; Wheelchair with assistance &lt;br&gt; WCHC &#x3D; Passenger is completely motionless
        /// </summary>
        /// <value>BBML &#x3D; INFANT/BABY FOOD &lt;br&gt; CHML &#x3D; CHILD MEAL &lt;br&gt; MOML &#x3D; HALAL MEAL &lt;br&gt; VGML &#x3D; VEGETARIAN MEAL &lt;br&gt; WCHR &#x3D; Wheelchair &lt;br&gt; WCHS &#x3D; Wheelchair with assistance &lt;br&gt; WCHC &#x3D; Passenger is completely motionless</value>
        [DataMember(Name="specialService", EmitDefaultValue=false)]
        public SpecialServiceEnum? SpecialService { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightTraveller" /> class.
        /// </summary>
        /// <param name="type">ADT &#x3D; Adult &lt;br&gt; CHD &#x3D; Child &lt;br&gt; INF &#x3D; Infant &lt;br&gt; INS &#x3D; Infant with seat &lt;br&gt; YTH &#x3D; Youth &lt;br&gt; SNR &#x3D; Senior.</param>
        /// <param name="specialService">BBML &#x3D; INFANT/BABY FOOD &lt;br&gt; CHML &#x3D; CHILD MEAL &lt;br&gt; MOML &#x3D; HALAL MEAL &lt;br&gt; VGML &#x3D; VEGETARIAN MEAL &lt;br&gt; WCHR &#x3D; Wheelchair &lt;br&gt; WCHS &#x3D; Wheelchair with assistance &lt;br&gt; WCHC &#x3D; Passenger is completely motionless.</param>
        /// <param name="infant">infant.</param>
        public FlightTraveller(TypeEnum? type = default(TypeEnum?), SpecialServiceEnum? specialService = default(SpecialServiceEnum?), FlightBaseTraveller infant = default(FlightBaseTraveller), string birthDate = default(string), string firstname = default(string), string lastname = default(string), string nationality = default(string), DateTime? passportExpirationDate = default(DateTime?), string passportNumber = default(string), SexEnum? sex = default(SexEnum?)) : base(birthDate, firstname, lastname, nationality, passportExpirationDate, passportNumber, sex)
        {
            this.Type = type;
            this.SpecialService = specialService;
            this.Infant = infant;
        }
        


        /// <summary>
        /// Gets or Sets Infant
        /// </summary>
        [DataMember(Name="infant", EmitDefaultValue=false)]
        public FlightBaseTraveller Infant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightTraveller {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SpecialService: ").Append(SpecialService).Append("\n");
            sb.Append("  Infant: ").Append(Infant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightTraveller);
        }

        /// <summary>
        /// Returns true if FlightTraveller instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightTraveller to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightTraveller input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.SpecialService == input.SpecialService ||
                    (this.SpecialService != null &&
                    this.SpecialService.Equals(input.SpecialService))
                ) && base.Equals(input) && 
                (
                    this.Infant == input.Infant ||
                    (this.Infant != null &&
                    this.Infant.Equals(input.Infant))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SpecialService != null)
                    hashCode = hashCode * 59 + this.SpecialService.GetHashCode();
                if (this.Infant != null)
                    hashCode = hashCode * 59 + this.Infant.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
