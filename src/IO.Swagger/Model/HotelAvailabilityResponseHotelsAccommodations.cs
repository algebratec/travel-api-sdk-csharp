/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelAvailabilityResponseHotelsAccommodations
    /// </summary>
    [DataContract]
        public partial class HotelAvailabilityResponseHotelsAccommodations :  IEquatable<HotelAvailabilityResponseHotelsAccommodations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelAvailabilityResponseHotelsAccommodations" /> class.
        /// </summary>
        /// <param name="adults">adults.</param>
        /// <param name="children">children.</param>
        /// <param name="ages">ages.</param>
        /// <param name="roomCode">roomCode.</param>
        /// <param name="rates">rates.</param>
        public HotelAvailabilityResponseHotelsAccommodations(int? adults = default(int?), int? children = default(int?), List<int?> ages = default(List<int?>), string roomCode = default(string), List<HotelAvailabilityResponseHotelsRates> rates = default(List<HotelAvailabilityResponseHotelsRates>))
        {
            this.Adults = adults;
            this.Children = children;
            this.Ages = ages;
            this.RoomCode = roomCode;
            this.Rates = rates;
        }
        
        /// <summary>
        /// Gets or Sets Adults
        /// </summary>
        [DataMember(Name="adults", EmitDefaultValue=false)]
        public int? Adults { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public int? Children { get; set; }

        /// <summary>
        /// Gets or Sets Ages
        /// </summary>
        [DataMember(Name="ages", EmitDefaultValue=false)]
        public List<int?> Ages { get; set; }

        /// <summary>
        /// Gets or Sets RoomCode
        /// </summary>
        [DataMember(Name="roomCode", EmitDefaultValue=false)]
        public string RoomCode { get; set; }

        /// <summary>
        /// Gets or Sets Rates
        /// </summary>
        [DataMember(Name="rates", EmitDefaultValue=false)]
        public List<HotelAvailabilityResponseHotelsRates> Rates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelAvailabilityResponseHotelsAccommodations {\n");
            sb.Append("  Adults: ").Append(Adults).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Ages: ").Append(Ages).Append("\n");
            sb.Append("  RoomCode: ").Append(RoomCode).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HotelAvailabilityResponseHotelsAccommodations);
        }

        /// <summary>
        /// Returns true if HotelAvailabilityResponseHotelsAccommodations instances are equal
        /// </summary>
        /// <param name="input">Instance of HotelAvailabilityResponseHotelsAccommodations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelAvailabilityResponseHotelsAccommodations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Adults == input.Adults ||
                    (this.Adults != null &&
                    this.Adults.Equals(input.Adults))
                ) && 
                (
                    this.Children == input.Children ||
                    (this.Children != null &&
                    this.Children.Equals(input.Children))
                ) && 
                (
                    this.Ages == input.Ages ||
                    this.Ages != null &&
                    input.Ages != null &&
                    this.Ages.SequenceEqual(input.Ages)
                ) && 
                (
                    this.RoomCode == input.RoomCode ||
                    (this.RoomCode != null &&
                    this.RoomCode.Equals(input.RoomCode))
                ) && 
                (
                    this.Rates == input.Rates ||
                    this.Rates != null &&
                    input.Rates != null &&
                    this.Rates.SequenceEqual(input.Rates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Adults != null)
                    hashCode = hashCode * 59 + this.Adults.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.Ages != null)
                    hashCode = hashCode * 59 + this.Ages.GetHashCode();
                if (this.RoomCode != null)
                    hashCode = hashCode * 59 + this.RoomCode.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
