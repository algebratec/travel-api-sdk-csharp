/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightConfirmationRequest
    /// </summary>
    [DataContract]
        public partial class FlightConfirmationRequest : FlightBookingKeyRequest,  IEquatable<FlightConfirmationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightConfirmationRequest" /> class.
        /// </summary>
        /// <param name="customer">customer.</param>
        /// <param name="onholdbooking">onholdbooking.</param>
        /// <param name="travellers">travellers.</param>
        public FlightConfirmationRequest(FlightCustomer customer = default(FlightCustomer), bool? onholdbooking = default(bool?), List<FlightTraveller> travellers = default(List<FlightTraveller>), string bookingKey = default(string)) : base(bookingKey)
        {
            this.Customer = customer;
            this.Onholdbooking = onholdbooking;
            this.Travellers = travellers;
        }
        
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public FlightCustomer Customer { get; set; }

        /// <summary>
        /// Gets or Sets Onholdbooking
        /// </summary>
        [DataMember(Name="onholdbooking", EmitDefaultValue=false)]
        public bool? Onholdbooking { get; set; }

        /// <summary>
        /// Gets or Sets Travellers
        /// </summary>
        [DataMember(Name="travellers", EmitDefaultValue=false)]
        public List<FlightTraveller> Travellers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightConfirmationRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Onholdbooking: ").Append(Onholdbooking).Append("\n");
            sb.Append("  Travellers: ").Append(Travellers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightConfirmationRequest);
        }

        /// <summary>
        /// Returns true if FlightConfirmationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightConfirmationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightConfirmationRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && base.Equals(input) && 
                (
                    this.Onholdbooking == input.Onholdbooking ||
                    (this.Onholdbooking != null &&
                    this.Onholdbooking.Equals(input.Onholdbooking))
                ) && base.Equals(input) && 
                (
                    this.Travellers == input.Travellers ||
                    this.Travellers != null &&
                    input.Travellers != null &&
                    this.Travellers.SequenceEqual(input.Travellers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.Onholdbooking != null)
                    hashCode = hashCode * 59 + this.Onholdbooking.GetHashCode();
                if (this.Travellers != null)
                    hashCode = hashCode * 59 + this.Travellers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
