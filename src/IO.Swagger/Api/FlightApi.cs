/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFlightApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// airport autocomplete service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="term"></param>
        /// <returns>FlightAirportAutocompleteResponse</returns>
        FlightAirportAutocompleteResponse FlightAirportAutocomplete (string term);

        /// <summary>
        /// airport autocomplete service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="term"></param>
        /// <returns>ApiResponse of FlightAirportAutocompleteResponse</returns>
        ApiResponse<FlightAirportAutocompleteResponse> FlightAirportAutocompleteWithHttpInfo (string term);
        /// <summary>
        /// flight availability service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FlightAvailabilityResponse</returns>
        FlightAvailabilityResponse FlightAvailability (FlightAvailabilityRequest body = null);

        /// <summary>
        /// flight availability service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FlightAvailabilityResponse</returns>
        ApiResponse<FlightAvailabilityResponse> FlightAvailabilityWithHttpInfo (FlightAvailabilityRequest body = null);
        /// <summary>
        /// confirm flight booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FlightBookingResponse</returns>
        FlightBookingResponse FlightBookingConfirmaiton (FlightConfirmationRequest body = null);

        /// <summary>
        /// confirm flight booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        ApiResponse<FlightBookingResponse> FlightBookingConfirmaitonWithHttpInfo (FlightConfirmationRequest body = null);
        /// <summary>
        /// fare service to check if flight is still bookable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FlightFareResponse</returns>
        FlightFareResponse FlightFare (FlightBookingKeyRequest body = null);

        /// <summary>
        /// fare service to check if flight is still bookable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FlightFareResponse</returns>
        ApiResponse<FlightFareResponse> FlightFareWithHttpInfo (FlightBookingKeyRequest body = null);
        /// <summary>
        /// flight fare rules service, this service provide the airline fare rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FlightFareRulesResponse</returns>
        FlightFareRulesResponse FlightFareRules (FlightBookingKeyRequest body = null);

        /// <summary>
        /// flight fare rules service, this service provide the airline fare rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FlightFareRulesResponse</returns>
        ApiResponse<FlightFareRulesResponse> FlightFareRulesWithHttpInfo (FlightBookingKeyRequest body = null);
        /// <summary>
        /// confirm on hold flight booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>FlightBookingResponse</returns>
        FlightBookingResponse FlightOnHoldBookingConfirmation (string bookingId);

        /// <summary>
        /// confirm on hold flight booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        ApiResponse<FlightBookingResponse> FlightOnHoldBookingConfirmationWithHttpInfo (string bookingId);
        /// <summary>
        /// Refresh flight booking using booking id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>FlightBookingResponse</returns>
        FlightBookingResponse FlightRefreshPNR (string bookingId);

        /// <summary>
        /// Refresh flight booking using booking id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        ApiResponse<FlightBookingResponse> FlightRefreshPNRWithHttpInfo (string bookingId);
        /// <summary>
        /// retrieve PNR using PNR record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordLocator"></param>
        /// <returns>FlightBookingResponse</returns>
        FlightBookingResponse FlightRetrievePNR (string recordLocator);

        /// <summary>
        /// retrieve PNR using PNR record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordLocator"></param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        ApiResponse<FlightBookingResponse> FlightRetrievePNRWithHttpInfo (string recordLocator);
        /// <summary>
        /// void PNR service, this service should be used in non BSP market to cancel the PNR before midnight
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>FlightBookingResponse</returns>
        FlightBookingResponse FlightVoidPNR (string bookingId);

        /// <summary>
        /// void PNR service, this service should be used in non BSP market to cancel the PNR before midnight
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        ApiResponse<FlightBookingResponse> FlightVoidPNRWithHttpInfo (string bookingId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// airport autocomplete service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="term"></param>
        /// <returns>Task of FlightAirportAutocompleteResponse</returns>
        System.Threading.Tasks.Task<FlightAirportAutocompleteResponse> FlightAirportAutocompleteAsync (string term);

        /// <summary>
        /// airport autocomplete service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="term"></param>
        /// <returns>Task of ApiResponse (FlightAirportAutocompleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlightAirportAutocompleteResponse>> FlightAirportAutocompleteAsyncWithHttpInfo (string term);
        /// <summary>
        /// flight availability service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FlightAvailabilityResponse</returns>
        System.Threading.Tasks.Task<FlightAvailabilityResponse> FlightAvailabilityAsync (FlightAvailabilityRequest body = null);

        /// <summary>
        /// flight availability service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FlightAvailabilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlightAvailabilityResponse>> FlightAvailabilityAsyncWithHttpInfo (FlightAvailabilityRequest body = null);
        /// <summary>
        /// confirm flight booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FlightBookingResponse</returns>
        System.Threading.Tasks.Task<FlightBookingResponse> FlightBookingConfirmaitonAsync (FlightConfirmationRequest body = null);

        /// <summary>
        /// confirm flight booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightBookingConfirmaitonAsyncWithHttpInfo (FlightConfirmationRequest body = null);
        /// <summary>
        /// fare service to check if flight is still bookable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FlightFareResponse</returns>
        System.Threading.Tasks.Task<FlightFareResponse> FlightFareAsync (FlightBookingKeyRequest body = null);

        /// <summary>
        /// fare service to check if flight is still bookable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FlightFareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlightFareResponse>> FlightFareAsyncWithHttpInfo (FlightBookingKeyRequest body = null);
        /// <summary>
        /// flight fare rules service, this service provide the airline fare rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FlightFareRulesResponse</returns>
        System.Threading.Tasks.Task<FlightFareRulesResponse> FlightFareRulesAsync (FlightBookingKeyRequest body = null);

        /// <summary>
        /// flight fare rules service, this service provide the airline fare rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FlightFareRulesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlightFareRulesResponse>> FlightFareRulesAsyncWithHttpInfo (FlightBookingKeyRequest body = null);
        /// <summary>
        /// confirm on hold flight booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of FlightBookingResponse</returns>
        System.Threading.Tasks.Task<FlightBookingResponse> FlightOnHoldBookingConfirmationAsync (string bookingId);

        /// <summary>
        /// confirm on hold flight booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightOnHoldBookingConfirmationAsyncWithHttpInfo (string bookingId);
        /// <summary>
        /// Refresh flight booking using booking id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of FlightBookingResponse</returns>
        System.Threading.Tasks.Task<FlightBookingResponse> FlightRefreshPNRAsync (string bookingId);

        /// <summary>
        /// Refresh flight booking using booking id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightRefreshPNRAsyncWithHttpInfo (string bookingId);
        /// <summary>
        /// retrieve PNR using PNR record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordLocator"></param>
        /// <returns>Task of FlightBookingResponse</returns>
        System.Threading.Tasks.Task<FlightBookingResponse> FlightRetrievePNRAsync (string recordLocator);

        /// <summary>
        /// retrieve PNR using PNR record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordLocator"></param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightRetrievePNRAsyncWithHttpInfo (string recordLocator);
        /// <summary>
        /// void PNR service, this service should be used in non BSP market to cancel the PNR before midnight
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of FlightBookingResponse</returns>
        System.Threading.Tasks.Task<FlightBookingResponse> FlightVoidPNRAsync (string bookingId);

        /// <summary>
        /// void PNR service, this service should be used in non BSP market to cancel the PNR before midnight
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightVoidPNRAsyncWithHttpInfo (string bookingId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FlightApi : IFlightApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FlightApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FlightApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlightApi"/> class
        /// </summary>
        /// <returns></returns>
        public FlightApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlightApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FlightApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// airport autocomplete service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="term"></param>
        /// <returns>FlightAirportAutocompleteResponse</returns>
        public FlightAirportAutocompleteResponse FlightAirportAutocomplete (string term)
        {
             ApiResponse<FlightAirportAutocompleteResponse> localVarResponse = FlightAirportAutocompleteWithHttpInfo(term);
             return localVarResponse.Data;
        }

        /// <summary>
        /// airport autocomplete service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="term"></param>
        /// <returns>ApiResponse of FlightAirportAutocompleteResponse</returns>
        public ApiResponse< FlightAirportAutocompleteResponse > FlightAirportAutocompleteWithHttpInfo (string term)
        {
            // verify the required parameter 'term' is set
            if (term == null)
                throw new ApiException(400, "Missing required parameter 'term' when calling FlightApi->FlightAirportAutocomplete");

            var localVarPath = "/v1/flight/booking/airport/{term}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (term != null) localVarPathParams.Add("term", this.Configuration.ApiClient.ParameterToString(term)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightAirportAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightAirportAutocompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightAirportAutocompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightAirportAutocompleteResponse)));
        }

        /// <summary>
        /// airport autocomplete service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="term"></param>
        /// <returns>Task of FlightAirportAutocompleteResponse</returns>
        public async System.Threading.Tasks.Task<FlightAirportAutocompleteResponse> FlightAirportAutocompleteAsync (string term)
        {
             ApiResponse<FlightAirportAutocompleteResponse> localVarResponse = await FlightAirportAutocompleteAsyncWithHttpInfo(term);
             return localVarResponse.Data;

        }

        /// <summary>
        /// airport autocomplete service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="term"></param>
        /// <returns>Task of ApiResponse (FlightAirportAutocompleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlightAirportAutocompleteResponse>> FlightAirportAutocompleteAsyncWithHttpInfo (string term)
        {
            // verify the required parameter 'term' is set
            if (term == null)
                throw new ApiException(400, "Missing required parameter 'term' when calling FlightApi->FlightAirportAutocomplete");

            var localVarPath = "/v1/flight/booking/airport/{term}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (term != null) localVarPathParams.Add("term", this.Configuration.ApiClient.ParameterToString(term)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightAirportAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightAirportAutocompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightAirportAutocompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightAirportAutocompleteResponse)));
        }

        /// <summary>
        /// flight availability service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FlightAvailabilityResponse</returns>
        public FlightAvailabilityResponse FlightAvailability (FlightAvailabilityRequest body = null)
        {
             ApiResponse<FlightAvailabilityResponse> localVarResponse = FlightAvailabilityWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// flight availability service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FlightAvailabilityResponse</returns>
        public ApiResponse< FlightAvailabilityResponse > FlightAvailabilityWithHttpInfo (FlightAvailabilityRequest body = null)
        {

            var localVarPath = "/v1/flight/booking/availability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightAvailability", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightAvailabilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightAvailabilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightAvailabilityResponse)));
        }

        /// <summary>
        /// flight availability service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FlightAvailabilityResponse</returns>
        public async System.Threading.Tasks.Task<FlightAvailabilityResponse> FlightAvailabilityAsync (FlightAvailabilityRequest body = null)
        {
             ApiResponse<FlightAvailabilityResponse> localVarResponse = await FlightAvailabilityAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// flight availability service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FlightAvailabilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlightAvailabilityResponse>> FlightAvailabilityAsyncWithHttpInfo (FlightAvailabilityRequest body = null)
        {

            var localVarPath = "/v1/flight/booking/availability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightAvailability", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightAvailabilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightAvailabilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightAvailabilityResponse)));
        }

        /// <summary>
        /// confirm flight booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FlightBookingResponse</returns>
        public FlightBookingResponse FlightBookingConfirmaiton (FlightConfirmationRequest body = null)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = FlightBookingConfirmaitonWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirm flight booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        public ApiResponse< FlightBookingResponse > FlightBookingConfirmaitonWithHttpInfo (FlightConfirmationRequest body = null)
        {

            var localVarPath = "/v1/flight/booking/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightBookingConfirmaiton", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

        /// <summary>
        /// confirm flight booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FlightBookingResponse</returns>
        public async System.Threading.Tasks.Task<FlightBookingResponse> FlightBookingConfirmaitonAsync (FlightConfirmationRequest body = null)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = await FlightBookingConfirmaitonAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirm flight booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightBookingConfirmaitonAsyncWithHttpInfo (FlightConfirmationRequest body = null)
        {

            var localVarPath = "/v1/flight/booking/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightBookingConfirmaiton", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

        /// <summary>
        /// fare service to check if flight is still bookable 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FlightFareResponse</returns>
        public FlightFareResponse FlightFare (FlightBookingKeyRequest body = null)
        {
             ApiResponse<FlightFareResponse> localVarResponse = FlightFareWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// fare service to check if flight is still bookable 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FlightFareResponse</returns>
        public ApiResponse< FlightFareResponse > FlightFareWithHttpInfo (FlightBookingKeyRequest body = null)
        {

            var localVarPath = "/v1/flight/booking/fare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightFare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightFareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightFareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightFareResponse)));
        }

        /// <summary>
        /// fare service to check if flight is still bookable 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FlightFareResponse</returns>
        public async System.Threading.Tasks.Task<FlightFareResponse> FlightFareAsync (FlightBookingKeyRequest body = null)
        {
             ApiResponse<FlightFareResponse> localVarResponse = await FlightFareAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// fare service to check if flight is still bookable 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FlightFareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlightFareResponse>> FlightFareAsyncWithHttpInfo (FlightBookingKeyRequest body = null)
        {

            var localVarPath = "/v1/flight/booking/fare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightFare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightFareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightFareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightFareResponse)));
        }

        /// <summary>
        /// flight fare rules service, this service provide the airline fare rules 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FlightFareRulesResponse</returns>
        public FlightFareRulesResponse FlightFareRules (FlightBookingKeyRequest body = null)
        {
             ApiResponse<FlightFareRulesResponse> localVarResponse = FlightFareRulesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// flight fare rules service, this service provide the airline fare rules 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FlightFareRulesResponse</returns>
        public ApiResponse< FlightFareRulesResponse > FlightFareRulesWithHttpInfo (FlightBookingKeyRequest body = null)
        {

            var localVarPath = "/v1/flight/booking/fareRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightFareRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightFareRulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightFareRulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightFareRulesResponse)));
        }

        /// <summary>
        /// flight fare rules service, this service provide the airline fare rules 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FlightFareRulesResponse</returns>
        public async System.Threading.Tasks.Task<FlightFareRulesResponse> FlightFareRulesAsync (FlightBookingKeyRequest body = null)
        {
             ApiResponse<FlightFareRulesResponse> localVarResponse = await FlightFareRulesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// flight fare rules service, this service provide the airline fare rules 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FlightFareRulesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlightFareRulesResponse>> FlightFareRulesAsyncWithHttpInfo (FlightBookingKeyRequest body = null)
        {

            var localVarPath = "/v1/flight/booking/fareRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightFareRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightFareRulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightFareRulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightFareRulesResponse)));
        }

        /// <summary>
        /// confirm on hold flight booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>FlightBookingResponse</returns>
        public FlightBookingResponse FlightOnHoldBookingConfirmation (string bookingId)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = FlightOnHoldBookingConfirmationWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirm on hold flight booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        public ApiResponse< FlightBookingResponse > FlightOnHoldBookingConfirmationWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling FlightApi->FlightOnHoldBookingConfirmation");

            var localVarPath = "/v1/flight/booking/confirmOnHoldBooking/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightOnHoldBookingConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

        /// <summary>
        /// confirm on hold flight booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of FlightBookingResponse</returns>
        public async System.Threading.Tasks.Task<FlightBookingResponse> FlightOnHoldBookingConfirmationAsync (string bookingId)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = await FlightOnHoldBookingConfirmationAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirm on hold flight booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightOnHoldBookingConfirmationAsyncWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling FlightApi->FlightOnHoldBookingConfirmation");

            var localVarPath = "/v1/flight/booking/confirmOnHoldBooking/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightOnHoldBookingConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

        /// <summary>
        /// Refresh flight booking using booking id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>FlightBookingResponse</returns>
        public FlightBookingResponse FlightRefreshPNR (string bookingId)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = FlightRefreshPNRWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh flight booking using booking id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        public ApiResponse< FlightBookingResponse > FlightRefreshPNRWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling FlightApi->FlightRefreshPNR");

            var localVarPath = "/v1/flight/booking/refresh/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightRefreshPNR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

        /// <summary>
        /// Refresh flight booking using booking id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of FlightBookingResponse</returns>
        public async System.Threading.Tasks.Task<FlightBookingResponse> FlightRefreshPNRAsync (string bookingId)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = await FlightRefreshPNRAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refresh flight booking using booking id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightRefreshPNRAsyncWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling FlightApi->FlightRefreshPNR");

            var localVarPath = "/v1/flight/booking/refresh/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightRefreshPNR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

        /// <summary>
        /// retrieve PNR using PNR record 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordLocator"></param>
        /// <returns>FlightBookingResponse</returns>
        public FlightBookingResponse FlightRetrievePNR (string recordLocator)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = FlightRetrievePNRWithHttpInfo(recordLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieve PNR using PNR record 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordLocator"></param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        public ApiResponse< FlightBookingResponse > FlightRetrievePNRWithHttpInfo (string recordLocator)
        {
            // verify the required parameter 'recordLocator' is set
            if (recordLocator == null)
                throw new ApiException(400, "Missing required parameter 'recordLocator' when calling FlightApi->FlightRetrievePNR");

            var localVarPath = "/v1/flight/booking/retrievePNR/{recordLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordLocator != null) localVarPathParams.Add("recordLocator", this.Configuration.ApiClient.ParameterToString(recordLocator)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightRetrievePNR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

        /// <summary>
        /// retrieve PNR using PNR record 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordLocator"></param>
        /// <returns>Task of FlightBookingResponse</returns>
        public async System.Threading.Tasks.Task<FlightBookingResponse> FlightRetrievePNRAsync (string recordLocator)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = await FlightRetrievePNRAsyncWithHttpInfo(recordLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve PNR using PNR record 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordLocator"></param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightRetrievePNRAsyncWithHttpInfo (string recordLocator)
        {
            // verify the required parameter 'recordLocator' is set
            if (recordLocator == null)
                throw new ApiException(400, "Missing required parameter 'recordLocator' when calling FlightApi->FlightRetrievePNR");

            var localVarPath = "/v1/flight/booking/retrievePNR/{recordLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordLocator != null) localVarPathParams.Add("recordLocator", this.Configuration.ApiClient.ParameterToString(recordLocator)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightRetrievePNR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

        /// <summary>
        /// void PNR service, this service should be used in non BSP market to cancel the PNR before midnight 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>FlightBookingResponse</returns>
        public FlightBookingResponse FlightVoidPNR (string bookingId)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = FlightVoidPNRWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// void PNR service, this service should be used in non BSP market to cancel the PNR before midnight 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of FlightBookingResponse</returns>
        public ApiResponse< FlightBookingResponse > FlightVoidPNRWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling FlightApi->FlightVoidPNR");

            var localVarPath = "/v1/flight/booking/voidPNR/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightVoidPNR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

        /// <summary>
        /// void PNR service, this service should be used in non BSP market to cancel the PNR before midnight 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of FlightBookingResponse</returns>
        public async System.Threading.Tasks.Task<FlightBookingResponse> FlightVoidPNRAsync (string bookingId)
        {
             ApiResponse<FlightBookingResponse> localVarResponse = await FlightVoidPNRAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// void PNR service, this service should be used in non BSP market to cancel the PNR before midnight 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (FlightBookingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlightBookingResponse>> FlightVoidPNRAsyncWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling FlightApi->FlightVoidPNR");

            var localVarPath = "/v1/flight/booking/voidPNR/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlightVoidPNR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlightBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FlightBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlightBookingResponse)));
        }

    }
}
