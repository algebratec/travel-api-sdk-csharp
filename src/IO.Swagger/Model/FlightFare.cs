/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightFare
    /// </summary>
    [DataContract]
        public partial class FlightFare :  IEquatable<FlightFare>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightFare" /> class.
        /// </summary>
        /// <param name="allowMinorSinglePassenger">allowMinorSinglePassenger.</param>
        /// <param name="canBeBookedOnhold">canBeBookedOnhold.</param>
        /// <param name="canBeVoided">canBeVoided.</param>
        /// <param name="isBookable">isBookable.</param>
        /// <param name="paxNameCharacterLimit">paxNameCharacterLimit.</param>
        /// <param name="paxNameCharacterLimitINF">paxNameCharacterLimitINF.</param>
        public FlightFare(bool? allowMinorSinglePassenger = default(bool?), bool? canBeBookedOnhold = default(bool?), bool? canBeVoided = default(bool?), bool? isBookable = default(bool?), int? paxNameCharacterLimit = default(int?), int? paxNameCharacterLimitINF = default(int?))
        {
            this.AllowMinorSinglePassenger = allowMinorSinglePassenger;
            this.CanBeBookedOnhold = canBeBookedOnhold;
            this.CanBeVoided = canBeVoided;
            this.IsBookable = isBookable;
            this.PaxNameCharacterLimit = paxNameCharacterLimit;
            this.PaxNameCharacterLimitINF = paxNameCharacterLimitINF;
        }
        
        /// <summary>
        /// Gets or Sets AllowMinorSinglePassenger
        /// </summary>
        [DataMember(Name="allowMinorSinglePassenger", EmitDefaultValue=false)]
        public bool? AllowMinorSinglePassenger { get; set; }

        /// <summary>
        /// Gets or Sets CanBeBookedOnhold
        /// </summary>
        [DataMember(Name="canBeBookedOnhold", EmitDefaultValue=false)]
        public bool? CanBeBookedOnhold { get; set; }

        /// <summary>
        /// Gets or Sets CanBeVoided
        /// </summary>
        [DataMember(Name="canBeVoided", EmitDefaultValue=false)]
        public bool? CanBeVoided { get; set; }

        /// <summary>
        /// Gets or Sets IsBookable
        /// </summary>
        [DataMember(Name="isBookable", EmitDefaultValue=false)]
        public bool? IsBookable { get; set; }

        /// <summary>
        /// Gets or Sets PaxNameCharacterLimit
        /// </summary>
        [DataMember(Name="paxNameCharacterLimit", EmitDefaultValue=false)]
        public int? PaxNameCharacterLimit { get; set; }

        /// <summary>
        /// Gets or Sets PaxNameCharacterLimitINF
        /// </summary>
        [DataMember(Name="paxNameCharacterLimitINF", EmitDefaultValue=false)]
        public int? PaxNameCharacterLimitINF { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightFare {\n");
            sb.Append("  AllowMinorSinglePassenger: ").Append(AllowMinorSinglePassenger).Append("\n");
            sb.Append("  CanBeBookedOnhold: ").Append(CanBeBookedOnhold).Append("\n");
            sb.Append("  CanBeVoided: ").Append(CanBeVoided).Append("\n");
            sb.Append("  IsBookable: ").Append(IsBookable).Append("\n");
            sb.Append("  PaxNameCharacterLimit: ").Append(PaxNameCharacterLimit).Append("\n");
            sb.Append("  PaxNameCharacterLimitINF: ").Append(PaxNameCharacterLimitINF).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightFare);
        }

        /// <summary>
        /// Returns true if FlightFare instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightFare to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightFare input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowMinorSinglePassenger == input.AllowMinorSinglePassenger ||
                    (this.AllowMinorSinglePassenger != null &&
                    this.AllowMinorSinglePassenger.Equals(input.AllowMinorSinglePassenger))
                ) && 
                (
                    this.CanBeBookedOnhold == input.CanBeBookedOnhold ||
                    (this.CanBeBookedOnhold != null &&
                    this.CanBeBookedOnhold.Equals(input.CanBeBookedOnhold))
                ) && 
                (
                    this.CanBeVoided == input.CanBeVoided ||
                    (this.CanBeVoided != null &&
                    this.CanBeVoided.Equals(input.CanBeVoided))
                ) && 
                (
                    this.IsBookable == input.IsBookable ||
                    (this.IsBookable != null &&
                    this.IsBookable.Equals(input.IsBookable))
                ) && 
                (
                    this.PaxNameCharacterLimit == input.PaxNameCharacterLimit ||
                    (this.PaxNameCharacterLimit != null &&
                    this.PaxNameCharacterLimit.Equals(input.PaxNameCharacterLimit))
                ) && 
                (
                    this.PaxNameCharacterLimitINF == input.PaxNameCharacterLimitINF ||
                    (this.PaxNameCharacterLimitINF != null &&
                    this.PaxNameCharacterLimitINF.Equals(input.PaxNameCharacterLimitINF))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowMinorSinglePassenger != null)
                    hashCode = hashCode * 59 + this.AllowMinorSinglePassenger.GetHashCode();
                if (this.CanBeBookedOnhold != null)
                    hashCode = hashCode * 59 + this.CanBeBookedOnhold.GetHashCode();
                if (this.CanBeVoided != null)
                    hashCode = hashCode * 59 + this.CanBeVoided.GetHashCode();
                if (this.IsBookable != null)
                    hashCode = hashCode * 59 + this.IsBookable.GetHashCode();
                if (this.PaxNameCharacterLimit != null)
                    hashCode = hashCode * 59 + this.PaxNameCharacterLimit.GetHashCode();
                if (this.PaxNameCharacterLimitINF != null)
                    hashCode = hashCode * 59 + this.PaxNameCharacterLimitINF.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
