/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelCheckRatesResponseHotelRates
    /// </summary>
    [DataContract]
        public partial class HotelCheckRatesResponseHotelRates :  IEquatable<HotelCheckRatesResponseHotelRates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelCheckRatesResponseHotelRates" /> class.
        /// </summary>
        /// <param name="rateKey">rateKey.</param>
        /// <param name="boardName">boardName.</param>
        /// <param name="boardCode">boardCode.</param>
        /// <param name="net">net.</param>
        /// <param name="adults">adults.</param>
        /// <param name="children">children.</param>
        /// <param name="cancellationPolicies">cancellationPolicies.</param>
        public HotelCheckRatesResponseHotelRates(string rateKey = default(string), string boardName = default(string), string boardCode = default(string), int? net = default(int?), int? adults = default(int?), int? children = default(int?), List<CancellationPolicy> cancellationPolicies = default(List<CancellationPolicy>))
        {
            this.RateKey = rateKey;
            this.BoardName = boardName;
            this.BoardCode = boardCode;
            this.Net = net;
            this.Adults = adults;
            this.Children = children;
            this.CancellationPolicies = cancellationPolicies;
        }
        
        /// <summary>
        /// Gets or Sets RateKey
        /// </summary>
        [DataMember(Name="rateKey", EmitDefaultValue=false)]
        public string RateKey { get; set; }

        /// <summary>
        /// Gets or Sets BoardName
        /// </summary>
        [DataMember(Name="boardName", EmitDefaultValue=false)]
        public string BoardName { get; set; }

        /// <summary>
        /// Gets or Sets BoardCode
        /// </summary>
        [DataMember(Name="boardCode", EmitDefaultValue=false)]
        public string BoardCode { get; set; }

        /// <summary>
        /// Gets or Sets Net
        /// </summary>
        [DataMember(Name="net", EmitDefaultValue=false)]
        public int? Net { get; set; }

        /// <summary>
        /// Gets or Sets Adults
        /// </summary>
        [DataMember(Name="adults", EmitDefaultValue=false)]
        public int? Adults { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public int? Children { get; set; }

        /// <summary>
        /// Gets or Sets CancellationPolicies
        /// </summary>
        [DataMember(Name="cancellationPolicies", EmitDefaultValue=false)]
        public List<CancellationPolicy> CancellationPolicies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelCheckRatesResponseHotelRates {\n");
            sb.Append("  RateKey: ").Append(RateKey).Append("\n");
            sb.Append("  BoardName: ").Append(BoardName).Append("\n");
            sb.Append("  BoardCode: ").Append(BoardCode).Append("\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("  Adults: ").Append(Adults).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  CancellationPolicies: ").Append(CancellationPolicies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HotelCheckRatesResponseHotelRates);
        }

        /// <summary>
        /// Returns true if HotelCheckRatesResponseHotelRates instances are equal
        /// </summary>
        /// <param name="input">Instance of HotelCheckRatesResponseHotelRates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelCheckRatesResponseHotelRates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RateKey == input.RateKey ||
                    (this.RateKey != null &&
                    this.RateKey.Equals(input.RateKey))
                ) && 
                (
                    this.BoardName == input.BoardName ||
                    (this.BoardName != null &&
                    this.BoardName.Equals(input.BoardName))
                ) && 
                (
                    this.BoardCode == input.BoardCode ||
                    (this.BoardCode != null &&
                    this.BoardCode.Equals(input.BoardCode))
                ) && 
                (
                    this.Net == input.Net ||
                    (this.Net != null &&
                    this.Net.Equals(input.Net))
                ) && 
                (
                    this.Adults == input.Adults ||
                    (this.Adults != null &&
                    this.Adults.Equals(input.Adults))
                ) && 
                (
                    this.Children == input.Children ||
                    (this.Children != null &&
                    this.Children.Equals(input.Children))
                ) && 
                (
                    this.CancellationPolicies == input.CancellationPolicies ||
                    this.CancellationPolicies != null &&
                    input.CancellationPolicies != null &&
                    this.CancellationPolicies.SequenceEqual(input.CancellationPolicies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RateKey != null)
                    hashCode = hashCode * 59 + this.RateKey.GetHashCode();
                if (this.BoardName != null)
                    hashCode = hashCode * 59 + this.BoardName.GetHashCode();
                if (this.BoardCode != null)
                    hashCode = hashCode * 59 + this.BoardCode.GetHashCode();
                if (this.Net != null)
                    hashCode = hashCode * 59 + this.Net.GetHashCode();
                if (this.Adults != null)
                    hashCode = hashCode * 59 + this.Adults.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.CancellationPolicies != null)
                    hashCode = hashCode * 59 + this.CancellationPolicies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
