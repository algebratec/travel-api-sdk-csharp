/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelConfirmationRequestPayment
    /// </summary>
    [DataContract]
        public partial class HotelConfirmationRequestPayment :  IEquatable<HotelConfirmationRequestPayment>, IValidatableObject
    {
        /// <summary>
        /// Defines Method
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MethodEnum
        {
            /// <summary>
            /// Enum Cc for value: cc
            /// </summary>
            [EnumMember(Value = "cc")]
            Cc = 1        }
        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelConfirmationRequestPayment" /> class.
        /// </summary>
        /// <param name="method">method.</param>
        /// <param name="ccType">ccType.</param>
        /// <param name="ccNumber">ccNumber.</param>
        /// <param name="ccCode">ccCode.</param>
        /// <param name="ccEcpMonth">ccEcpMonth.</param>
        /// <param name="ccExpYear">ccExpYear.</param>
        public HotelConfirmationRequestPayment(MethodEnum? method = default(MethodEnum?), string ccType = default(string), string ccNumber = default(string), string ccCode = default(string), string ccEcpMonth = default(string), string ccExpYear = default(string))
        {
            this.Method = method;
            this.CcType = ccType;
            this.CcNumber = ccNumber;
            this.CcCode = ccCode;
            this.CcEcpMonth = ccEcpMonth;
            this.CcExpYear = ccExpYear;
        }
        

        /// <summary>
        /// Gets or Sets CcType
        /// </summary>
        [DataMember(Name="ccType", EmitDefaultValue=false)]
        public string CcType { get; set; }

        /// <summary>
        /// Gets or Sets CcNumber
        /// </summary>
        [DataMember(Name="ccNumber", EmitDefaultValue=false)]
        public string CcNumber { get; set; }

        /// <summary>
        /// Gets or Sets CcCode
        /// </summary>
        [DataMember(Name="ccCode", EmitDefaultValue=false)]
        public string CcCode { get; set; }

        /// <summary>
        /// Gets or Sets CcEcpMonth
        /// </summary>
        [DataMember(Name="ccEcpMonth", EmitDefaultValue=false)]
        public string CcEcpMonth { get; set; }

        /// <summary>
        /// Gets or Sets CcExpYear
        /// </summary>
        [DataMember(Name="ccExpYear", EmitDefaultValue=false)]
        public string CcExpYear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelConfirmationRequestPayment {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  CcType: ").Append(CcType).Append("\n");
            sb.Append("  CcNumber: ").Append(CcNumber).Append("\n");
            sb.Append("  CcCode: ").Append(CcCode).Append("\n");
            sb.Append("  CcEcpMonth: ").Append(CcEcpMonth).Append("\n");
            sb.Append("  CcExpYear: ").Append(CcExpYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HotelConfirmationRequestPayment);
        }

        /// <summary>
        /// Returns true if HotelConfirmationRequestPayment instances are equal
        /// </summary>
        /// <param name="input">Instance of HotelConfirmationRequestPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelConfirmationRequestPayment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.CcType == input.CcType ||
                    (this.CcType != null &&
                    this.CcType.Equals(input.CcType))
                ) && 
                (
                    this.CcNumber == input.CcNumber ||
                    (this.CcNumber != null &&
                    this.CcNumber.Equals(input.CcNumber))
                ) && 
                (
                    this.CcCode == input.CcCode ||
                    (this.CcCode != null &&
                    this.CcCode.Equals(input.CcCode))
                ) && 
                (
                    this.CcEcpMonth == input.CcEcpMonth ||
                    (this.CcEcpMonth != null &&
                    this.CcEcpMonth.Equals(input.CcEcpMonth))
                ) && 
                (
                    this.CcExpYear == input.CcExpYear ||
                    (this.CcExpYear != null &&
                    this.CcExpYear.Equals(input.CcExpYear))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.CcType != null)
                    hashCode = hashCode * 59 + this.CcType.GetHashCode();
                if (this.CcNumber != null)
                    hashCode = hashCode * 59 + this.CcNumber.GetHashCode();
                if (this.CcCode != null)
                    hashCode = hashCode * 59 + this.CcCode.GetHashCode();
                if (this.CcEcpMonth != null)
                    hashCode = hashCode * 59 + this.CcEcpMonth.GetHashCode();
                if (this.CcExpYear != null)
                    hashCode = hashCode * 59 + this.CcExpYear.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
