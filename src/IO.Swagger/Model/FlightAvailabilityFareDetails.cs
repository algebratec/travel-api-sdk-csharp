/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightAvailabilityFareDetails
    /// </summary>
    [DataContract]
        public partial class FlightAvailabilityFareDetails :  IEquatable<FlightAvailabilityFareDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightAvailabilityFareDetails" /> class.
        /// </summary>
        /// <param name="availableStatus">availableStatus.</param>
        /// <param name="cabin">cabin.</param>
        /// <param name="fares">fares.</param>
        /// <param name="reservationClass">reservationClass.</param>
        public FlightAvailabilityFareDetails(string availableStatus = default(string), string cabin = default(string), FlightAvailabilityFareDetailsFares fares = default(FlightAvailabilityFareDetailsFares), string reservationClass = default(string))
        {
            this.AvailableStatus = availableStatus;
            this.Cabin = cabin;
            this.Fares = fares;
            this.ReservationClass = reservationClass;
        }
        
        /// <summary>
        /// Gets or Sets AvailableStatus
        /// </summary>
        [DataMember(Name="availableStatus", EmitDefaultValue=false)]
        public string AvailableStatus { get; set; }

        /// <summary>
        /// Gets or Sets Cabin
        /// </summary>
        [DataMember(Name="cabin", EmitDefaultValue=false)]
        public string Cabin { get; set; }

        /// <summary>
        /// Gets or Sets Fares
        /// </summary>
        [DataMember(Name="fares", EmitDefaultValue=false)]
        public FlightAvailabilityFareDetailsFares Fares { get; set; }

        /// <summary>
        /// Gets or Sets ReservationClass
        /// </summary>
        [DataMember(Name="reservationClass", EmitDefaultValue=false)]
        public string ReservationClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightAvailabilityFareDetails {\n");
            sb.Append("  AvailableStatus: ").Append(AvailableStatus).Append("\n");
            sb.Append("  Cabin: ").Append(Cabin).Append("\n");
            sb.Append("  Fares: ").Append(Fares).Append("\n");
            sb.Append("  ReservationClass: ").Append(ReservationClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightAvailabilityFareDetails);
        }

        /// <summary>
        /// Returns true if FlightAvailabilityFareDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightAvailabilityFareDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightAvailabilityFareDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AvailableStatus == input.AvailableStatus ||
                    (this.AvailableStatus != null &&
                    this.AvailableStatus.Equals(input.AvailableStatus))
                ) && 
                (
                    this.Cabin == input.Cabin ||
                    (this.Cabin != null &&
                    this.Cabin.Equals(input.Cabin))
                ) && 
                (
                    this.Fares == input.Fares ||
                    (this.Fares != null &&
                    this.Fares.Equals(input.Fares))
                ) && 
                (
                    this.ReservationClass == input.ReservationClass ||
                    (this.ReservationClass != null &&
                    this.ReservationClass.Equals(input.ReservationClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AvailableStatus != null)
                    hashCode = hashCode * 59 + this.AvailableStatus.GetHashCode();
                if (this.Cabin != null)
                    hashCode = hashCode * 59 + this.Cabin.GetHashCode();
                if (this.Fares != null)
                    hashCode = hashCode * 59 + this.Fares.GetHashCode();
                if (this.ReservationClass != null)
                    hashCode = hashCode * 59 + this.ReservationClass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
