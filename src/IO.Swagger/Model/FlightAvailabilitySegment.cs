/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightAvailabilitySegment
    /// </summary>
    [DataContract]
        public partial class FlightAvailabilitySegment :  IEquatable<FlightAvailabilitySegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightAvailabilitySegment" /> class.
        /// </summary>
        /// <param name="arrival">arrival.</param>
        /// <param name="dayDifference">dayDifference.</param>
        /// <param name="departure">departure.</param>
        /// <param name="equipmentType">equipmentType.</param>
        /// <param name="flightOrtrainNumber">flightOrtrainNumber.</param>
        /// <param name="marketingCarrier">marketingCarrier.</param>
        /// <param name="operatingCarrier">operatingCarrier.</param>
        public FlightAvailabilitySegment(FlightDepartureAndArrivale arrival = default(FlightDepartureAndArrivale), int? dayDifference = default(int?), FlightDepartureAndArrivale departure = default(FlightDepartureAndArrivale), string equipmentType = default(string), string flightOrtrainNumber = default(string), string marketingCarrier = default(string), string operatingCarrier = default(string))
        {
            this.Arrival = arrival;
            this.DayDifference = dayDifference;
            this.Departure = departure;
            this.EquipmentType = equipmentType;
            this.FlightOrtrainNumber = flightOrtrainNumber;
            this.MarketingCarrier = marketingCarrier;
            this.OperatingCarrier = operatingCarrier;
        }
        
        /// <summary>
        /// Gets or Sets Arrival
        /// </summary>
        [DataMember(Name="arrival", EmitDefaultValue=false)]
        public FlightDepartureAndArrivale Arrival { get; set; }

        /// <summary>
        /// Gets or Sets DayDifference
        /// </summary>
        [DataMember(Name="dayDifference", EmitDefaultValue=false)]
        public int? DayDifference { get; set; }

        /// <summary>
        /// Gets or Sets Departure
        /// </summary>
        [DataMember(Name="departure", EmitDefaultValue=false)]
        public FlightDepartureAndArrivale Departure { get; set; }

        /// <summary>
        /// Gets or Sets EquipmentType
        /// </summary>
        [DataMember(Name="equipmentType", EmitDefaultValue=false)]
        public string EquipmentType { get; set; }

        /// <summary>
        /// Gets or Sets FlightOrtrainNumber
        /// </summary>
        [DataMember(Name="flightOrtrainNumber", EmitDefaultValue=false)]
        public string FlightOrtrainNumber { get; set; }

        /// <summary>
        /// Gets or Sets MarketingCarrier
        /// </summary>
        [DataMember(Name="marketingCarrier", EmitDefaultValue=false)]
        public string MarketingCarrier { get; set; }

        /// <summary>
        /// Gets or Sets OperatingCarrier
        /// </summary>
        [DataMember(Name="operatingCarrier", EmitDefaultValue=false)]
        public string OperatingCarrier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightAvailabilitySegment {\n");
            sb.Append("  Arrival: ").Append(Arrival).Append("\n");
            sb.Append("  DayDifference: ").Append(DayDifference).Append("\n");
            sb.Append("  Departure: ").Append(Departure).Append("\n");
            sb.Append("  EquipmentType: ").Append(EquipmentType).Append("\n");
            sb.Append("  FlightOrtrainNumber: ").Append(FlightOrtrainNumber).Append("\n");
            sb.Append("  MarketingCarrier: ").Append(MarketingCarrier).Append("\n");
            sb.Append("  OperatingCarrier: ").Append(OperatingCarrier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightAvailabilitySegment);
        }

        /// <summary>
        /// Returns true if FlightAvailabilitySegment instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightAvailabilitySegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightAvailabilitySegment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Arrival == input.Arrival ||
                    (this.Arrival != null &&
                    this.Arrival.Equals(input.Arrival))
                ) && 
                (
                    this.DayDifference == input.DayDifference ||
                    (this.DayDifference != null &&
                    this.DayDifference.Equals(input.DayDifference))
                ) && 
                (
                    this.Departure == input.Departure ||
                    (this.Departure != null &&
                    this.Departure.Equals(input.Departure))
                ) && 
                (
                    this.EquipmentType == input.EquipmentType ||
                    (this.EquipmentType != null &&
                    this.EquipmentType.Equals(input.EquipmentType))
                ) && 
                (
                    this.FlightOrtrainNumber == input.FlightOrtrainNumber ||
                    (this.FlightOrtrainNumber != null &&
                    this.FlightOrtrainNumber.Equals(input.FlightOrtrainNumber))
                ) && 
                (
                    this.MarketingCarrier == input.MarketingCarrier ||
                    (this.MarketingCarrier != null &&
                    this.MarketingCarrier.Equals(input.MarketingCarrier))
                ) && 
                (
                    this.OperatingCarrier == input.OperatingCarrier ||
                    (this.OperatingCarrier != null &&
                    this.OperatingCarrier.Equals(input.OperatingCarrier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Arrival != null)
                    hashCode = hashCode * 59 + this.Arrival.GetHashCode();
                if (this.DayDifference != null)
                    hashCode = hashCode * 59 + this.DayDifference.GetHashCode();
                if (this.Departure != null)
                    hashCode = hashCode * 59 + this.Departure.GetHashCode();
                if (this.EquipmentType != null)
                    hashCode = hashCode * 59 + this.EquipmentType.GetHashCode();
                if (this.FlightOrtrainNumber != null)
                    hashCode = hashCode * 59 + this.FlightOrtrainNumber.GetHashCode();
                if (this.MarketingCarrier != null)
                    hashCode = hashCode * 59 + this.MarketingCarrier.GetHashCode();
                if (this.OperatingCarrier != null)
                    hashCode = hashCode * 59 + this.OperatingCarrier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
