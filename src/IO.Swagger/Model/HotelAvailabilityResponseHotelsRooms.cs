/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelAvailabilityResponseHotelsRooms
    /// </summary>
    [DataContract]
        public partial class HotelAvailabilityResponseHotelsRooms :  IEquatable<HotelAvailabilityResponseHotelsRooms>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelAvailabilityResponseHotelsRooms" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="images">images.</param>
        /// <param name="adults">adults.</param>
        /// <param name="children">children.</param>
        /// <param name="maxPeople">maxPeople.</param>
        /// <param name="availability">availability.</param>
        public HotelAvailabilityResponseHotelsRooms(string code = default(string), string name = default(string), string description = default(string), List<HotelAvailabilityResponseHotelsImages> images = default(List<HotelAvailabilityResponseHotelsImages>), int? adults = default(int?), int? children = default(int?), int? maxPeople = default(int?), int? availability = default(int?))
        {
            this.Code = code;
            this.Name = name;
            this.Description = description;
            this.Images = images;
            this.Adults = adults;
            this.Children = children;
            this.MaxPeople = maxPeople;
            this.Availability = availability;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<HotelAvailabilityResponseHotelsImages> Images { get; set; }

        /// <summary>
        /// Gets or Sets Adults
        /// </summary>
        [DataMember(Name="adults", EmitDefaultValue=false)]
        public int? Adults { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public int? Children { get; set; }

        /// <summary>
        /// Gets or Sets MaxPeople
        /// </summary>
        [DataMember(Name="maxPeople", EmitDefaultValue=false)]
        public int? MaxPeople { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [DataMember(Name="availability", EmitDefaultValue=false)]
        public int? Availability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelAvailabilityResponseHotelsRooms {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Adults: ").Append(Adults).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  MaxPeople: ").Append(MaxPeople).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HotelAvailabilityResponseHotelsRooms);
        }

        /// <summary>
        /// Returns true if HotelAvailabilityResponseHotelsRooms instances are equal
        /// </summary>
        /// <param name="input">Instance of HotelAvailabilityResponseHotelsRooms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelAvailabilityResponseHotelsRooms input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.Adults == input.Adults ||
                    (this.Adults != null &&
                    this.Adults.Equals(input.Adults))
                ) && 
                (
                    this.Children == input.Children ||
                    (this.Children != null &&
                    this.Children.Equals(input.Children))
                ) && 
                (
                    this.MaxPeople == input.MaxPeople ||
                    (this.MaxPeople != null &&
                    this.MaxPeople.Equals(input.MaxPeople))
                ) && 
                (
                    this.Availability == input.Availability ||
                    (this.Availability != null &&
                    this.Availability.Equals(input.Availability))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Adults != null)
                    hashCode = hashCode * 59 + this.Adults.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.MaxPeople != null)
                    hashCode = hashCode * 59 + this.MaxPeople.GetHashCode();
                if (this.Availability != null)
                    hashCode = hashCode * 59 + this.Availability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
