/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightAvailabilityResponseBound
    /// </summary>
    [DataContract]
        public partial class FlightAvailabilityResponseBound :  IEquatable<FlightAvailabilityResponseBound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightAvailabilityResponseBound" /> class.
        /// </summary>
        /// <param name="eFT">eFT.</param>
        /// <param name="airlines">airlines.</param>
        /// <param name="arrival">arrival.</param>
        /// <param name="dayDifference">dayDifference.</param>
        /// <param name="departure">departure.</param>
        /// <param name="flightDuration">flightDuration.</param>
        /// <param name="flightId">flightId.</param>
        /// <param name="nbStops">nbStops.</param>
        /// <param name="segments">segments.</param>
        /// <param name="stopDuration">stopDuration.</param>
        /// <param name="stopoverAirports">stopoverAirports.</param>
        public FlightAvailabilityResponseBound(string eFT = default(string), List<string> airlines = default(List<string>), FlightDepartureAndArrivale arrival = default(FlightDepartureAndArrivale), int? dayDifference = default(int?), FlightDepartureAndArrivale departure = default(FlightDepartureAndArrivale), int? flightDuration = default(int?), int? flightId = default(int?), int? nbStops = default(int?), List<FlightAvailabilitySegment> segments = default(List<FlightAvailabilitySegment>), int? stopDuration = default(int?), List<string> stopoverAirports = default(List<string>))
        {
            this.EFT = eFT;
            this.Airlines = airlines;
            this.Arrival = arrival;
            this.DayDifference = dayDifference;
            this.Departure = departure;
            this.FlightDuration = flightDuration;
            this.FlightId = flightId;
            this.NbStops = nbStops;
            this.Segments = segments;
            this.StopDuration = stopDuration;
            this.StopoverAirports = stopoverAirports;
        }
        
        /// <summary>
        /// Gets or Sets EFT
        /// </summary>
        [DataMember(Name="EFT", EmitDefaultValue=false)]
        public string EFT { get; set; }

        /// <summary>
        /// Gets or Sets Airlines
        /// </summary>
        [DataMember(Name="airlines", EmitDefaultValue=false)]
        public List<string> Airlines { get; set; }

        /// <summary>
        /// Gets or Sets Arrival
        /// </summary>
        [DataMember(Name="arrival", EmitDefaultValue=false)]
        public FlightDepartureAndArrivale Arrival { get; set; }

        /// <summary>
        /// Gets or Sets DayDifference
        /// </summary>
        [DataMember(Name="dayDifference", EmitDefaultValue=false)]
        public int? DayDifference { get; set; }

        /// <summary>
        /// Gets or Sets Departure
        /// </summary>
        [DataMember(Name="departure", EmitDefaultValue=false)]
        public FlightDepartureAndArrivale Departure { get; set; }

        /// <summary>
        /// Gets or Sets FlightDuration
        /// </summary>
        [DataMember(Name="flightDuration", EmitDefaultValue=false)]
        public int? FlightDuration { get; set; }

        /// <summary>
        /// Gets or Sets FlightId
        /// </summary>
        [DataMember(Name="flightId", EmitDefaultValue=false)]
        public int? FlightId { get; set; }

        /// <summary>
        /// Gets or Sets NbStops
        /// </summary>
        [DataMember(Name="nbStops", EmitDefaultValue=false)]
        public int? NbStops { get; set; }

        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [DataMember(Name="segments", EmitDefaultValue=false)]
        public List<FlightAvailabilitySegment> Segments { get; set; }

        /// <summary>
        /// Gets or Sets StopDuration
        /// </summary>
        [DataMember(Name="stopDuration", EmitDefaultValue=false)]
        public int? StopDuration { get; set; }

        /// <summary>
        /// Gets or Sets StopoverAirports
        /// </summary>
        [DataMember(Name="stopoverAirports", EmitDefaultValue=false)]
        public List<string> StopoverAirports { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightAvailabilityResponseBound {\n");
            sb.Append("  EFT: ").Append(EFT).Append("\n");
            sb.Append("  Airlines: ").Append(Airlines).Append("\n");
            sb.Append("  Arrival: ").Append(Arrival).Append("\n");
            sb.Append("  DayDifference: ").Append(DayDifference).Append("\n");
            sb.Append("  Departure: ").Append(Departure).Append("\n");
            sb.Append("  FlightDuration: ").Append(FlightDuration).Append("\n");
            sb.Append("  FlightId: ").Append(FlightId).Append("\n");
            sb.Append("  NbStops: ").Append(NbStops).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  StopDuration: ").Append(StopDuration).Append("\n");
            sb.Append("  StopoverAirports: ").Append(StopoverAirports).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightAvailabilityResponseBound);
        }

        /// <summary>
        /// Returns true if FlightAvailabilityResponseBound instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightAvailabilityResponseBound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightAvailabilityResponseBound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EFT == input.EFT ||
                    (this.EFT != null &&
                    this.EFT.Equals(input.EFT))
                ) && 
                (
                    this.Airlines == input.Airlines ||
                    this.Airlines != null &&
                    input.Airlines != null &&
                    this.Airlines.SequenceEqual(input.Airlines)
                ) && 
                (
                    this.Arrival == input.Arrival ||
                    (this.Arrival != null &&
                    this.Arrival.Equals(input.Arrival))
                ) && 
                (
                    this.DayDifference == input.DayDifference ||
                    (this.DayDifference != null &&
                    this.DayDifference.Equals(input.DayDifference))
                ) && 
                (
                    this.Departure == input.Departure ||
                    (this.Departure != null &&
                    this.Departure.Equals(input.Departure))
                ) && 
                (
                    this.FlightDuration == input.FlightDuration ||
                    (this.FlightDuration != null &&
                    this.FlightDuration.Equals(input.FlightDuration))
                ) && 
                (
                    this.FlightId == input.FlightId ||
                    (this.FlightId != null &&
                    this.FlightId.Equals(input.FlightId))
                ) && 
                (
                    this.NbStops == input.NbStops ||
                    (this.NbStops != null &&
                    this.NbStops.Equals(input.NbStops))
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    input.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                ) && 
                (
                    this.StopDuration == input.StopDuration ||
                    (this.StopDuration != null &&
                    this.StopDuration.Equals(input.StopDuration))
                ) && 
                (
                    this.StopoverAirports == input.StopoverAirports ||
                    this.StopoverAirports != null &&
                    input.StopoverAirports != null &&
                    this.StopoverAirports.SequenceEqual(input.StopoverAirports)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EFT != null)
                    hashCode = hashCode * 59 + this.EFT.GetHashCode();
                if (this.Airlines != null)
                    hashCode = hashCode * 59 + this.Airlines.GetHashCode();
                if (this.Arrival != null)
                    hashCode = hashCode * 59 + this.Arrival.GetHashCode();
                if (this.DayDifference != null)
                    hashCode = hashCode * 59 + this.DayDifference.GetHashCode();
                if (this.Departure != null)
                    hashCode = hashCode * 59 + this.Departure.GetHashCode();
                if (this.FlightDuration != null)
                    hashCode = hashCode * 59 + this.FlightDuration.GetHashCode();
                if (this.FlightId != null)
                    hashCode = hashCode * 59 + this.FlightId.GetHashCode();
                if (this.NbStops != null)
                    hashCode = hashCode * 59 + this.NbStops.GetHashCode();
                if (this.Segments != null)
                    hashCode = hashCode * 59 + this.Segments.GetHashCode();
                if (this.StopDuration != null)
                    hashCode = hashCode * 59 + this.StopDuration.GetHashCode();
                if (this.StopoverAirports != null)
                    hashCode = hashCode * 59 + this.StopoverAirports.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
