/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelAvailabilityResponseHotels
    /// </summary>
    [DataContract]
        public partial class HotelAvailabilityResponseHotels :  IEquatable<HotelAvailabilityResponseHotels>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelAvailabilityResponseHotels" /> class.
        /// </summary>
        /// <param name="hotels">hotels.</param>
        /// <param name="checkIn">checkIn.</param>
        /// <param name="checkOut">checkOut.</param>
        /// <param name="total">total.</param>
        public HotelAvailabilityResponseHotels(List<HotelAvailabilityResponseHotelsHotels> hotels = default(List<HotelAvailabilityResponseHotelsHotels>), DateTime? checkIn = default(DateTime?), DateTime? checkOut = default(DateTime?), int? total = default(int?))
        {
            this.Hotels = hotels;
            this.CheckIn = checkIn;
            this.CheckOut = checkOut;
            this.Total = total;
        }
        
        /// <summary>
        /// Gets or Sets Hotels
        /// </summary>
        [DataMember(Name="hotels", EmitDefaultValue=false)]
        public List<HotelAvailabilityResponseHotelsHotels> Hotels { get; set; }

        /// <summary>
        /// Gets or Sets CheckIn
        /// </summary>
        [DataMember(Name="checkIn", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? CheckIn { get; set; }

        /// <summary>
        /// Gets or Sets CheckOut
        /// </summary>
        [DataMember(Name="checkOut", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? CheckOut { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelAvailabilityResponseHotels {\n");
            sb.Append("  Hotels: ").Append(Hotels).Append("\n");
            sb.Append("  CheckIn: ").Append(CheckIn).Append("\n");
            sb.Append("  CheckOut: ").Append(CheckOut).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HotelAvailabilityResponseHotels);
        }

        /// <summary>
        /// Returns true if HotelAvailabilityResponseHotels instances are equal
        /// </summary>
        /// <param name="input">Instance of HotelAvailabilityResponseHotels to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelAvailabilityResponseHotels input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Hotels == input.Hotels ||
                    this.Hotels != null &&
                    input.Hotels != null &&
                    this.Hotels.SequenceEqual(input.Hotels)
                ) && 
                (
                    this.CheckIn == input.CheckIn ||
                    (this.CheckIn != null &&
                    this.CheckIn.Equals(input.CheckIn))
                ) && 
                (
                    this.CheckOut == input.CheckOut ||
                    (this.CheckOut != null &&
                    this.CheckOut.Equals(input.CheckOut))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hotels != null)
                    hashCode = hashCode * 59 + this.Hotels.GetHashCode();
                if (this.CheckIn != null)
                    hashCode = hashCode * 59 + this.CheckIn.GetHashCode();
                if (this.CheckOut != null)
                    hashCode = hashCode * 59 + this.CheckOut.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
