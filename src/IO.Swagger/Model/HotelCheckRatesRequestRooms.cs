/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelCheckRatesRequestRooms
    /// </summary>
    [DataContract]
        public partial class HotelCheckRatesRequestRooms :  IEquatable<HotelCheckRatesRequestRooms>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelCheckRatesRequestRooms" /> class.
        /// </summary>
        /// <param name="rateKey">rateKey.</param>
        /// <param name="extras">extras.</param>
        public HotelCheckRatesRequestRooms(string rateKey = default(string), List<int?> extras = default(List<int?>))
        {
            this.RateKey = rateKey;
            this.Extras = extras;
        }
        
        /// <summary>
        /// Gets or Sets RateKey
        /// </summary>
        [DataMember(Name="rateKey", EmitDefaultValue=false)]
        public string RateKey { get; set; }

        /// <summary>
        /// Gets or Sets Extras
        /// </summary>
        [DataMember(Name="extras", EmitDefaultValue=false)]
        public List<int?> Extras { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelCheckRatesRequestRooms {\n");
            sb.Append("  RateKey: ").Append(RateKey).Append("\n");
            sb.Append("  Extras: ").Append(Extras).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HotelCheckRatesRequestRooms);
        }

        /// <summary>
        /// Returns true if HotelCheckRatesRequestRooms instances are equal
        /// </summary>
        /// <param name="input">Instance of HotelCheckRatesRequestRooms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelCheckRatesRequestRooms input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RateKey == input.RateKey ||
                    (this.RateKey != null &&
                    this.RateKey.Equals(input.RateKey))
                ) && 
                (
                    this.Extras == input.Extras ||
                    this.Extras != null &&
                    input.Extras != null &&
                    this.Extras.SequenceEqual(input.Extras)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RateKey != null)
                    hashCode = hashCode * 59 + this.RateKey.GetHashCode();
                if (this.Extras != null)
                    hashCode = hashCode * 59 + this.Extras.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
