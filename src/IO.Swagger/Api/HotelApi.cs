/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IHotelApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// list bookable hotels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>HotelAvailabilityResponse</returns>
        HotelAvailabilityResponse HotelAvailability (HotelAvailabilityRequest body = null);

        /// <summary>
        /// list bookable hotels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of HotelAvailabilityResponse</returns>
        ApiResponse<HotelAvailabilityResponse> HotelAvailabilityWithHttpInfo (HotelAvailabilityRequest body = null);
        /// <summary>
        /// cancel hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="SIMULATION"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>HotelCancellationResponse</returns>
        HotelCancellationResponse HotelBookingCancellation (string reference, bool? SIMULATION, string language = null);

        /// <summary>
        /// cancel hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="SIMULATION"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of HotelCancellationResponse</returns>
        ApiResponse<HotelCancellationResponse> HotelBookingCancellationWithHttpInfo (string reference, bool? SIMULATION, string language = null);
        /// <summary>
        /// confirm hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>HotelConfirmationResponse</returns>
        HotelConfirmationResponse HotelBookingConfirmation (HotelConfirmationRequest body = null);

        /// <summary>
        /// confirm hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of HotelConfirmationResponse</returns>
        ApiResponse<HotelConfirmationResponse> HotelBookingConfirmationWithHttpInfo (HotelConfirmationRequest body = null);
        /// <summary>
        /// check hotel rating
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>HotelCheckRatesResponse</returns>
        HotelCheckRatesResponse HotelCheckRate (HotelCheckRatesRequest body = null);

        /// <summary>
        /// check hotel rating
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of HotelCheckRatesResponse</returns>
        ApiResponse<HotelCheckRatesResponse> HotelCheckRateWithHttpInfo (HotelCheckRatesRequest body = null);
        /// <summary>
        /// retrieve hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>HotelRetrieveBookingResponse</returns>
        HotelRetrieveBookingResponse HotelRetrieveBooking (string reference, string language = null);

        /// <summary>
        /// retrieve hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of HotelRetrieveBookingResponse</returns>
        ApiResponse<HotelRetrieveBookingResponse> HotelRetrieveBookingWithHttpInfo (string reference, string language = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// list bookable hotels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of HotelAvailabilityResponse</returns>
        System.Threading.Tasks.Task<HotelAvailabilityResponse> HotelAvailabilityAsync (HotelAvailabilityRequest body = null);

        /// <summary>
        /// list bookable hotels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelAvailabilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HotelAvailabilityResponse>> HotelAvailabilityAsyncWithHttpInfo (HotelAvailabilityRequest body = null);
        /// <summary>
        /// cancel hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="SIMULATION"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>Task of HotelCancellationResponse</returns>
        System.Threading.Tasks.Task<HotelCancellationResponse> HotelBookingCancellationAsync (string reference, bool? SIMULATION, string language = null);

        /// <summary>
        /// cancel hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="SIMULATION"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelCancellationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HotelCancellationResponse>> HotelBookingCancellationAsyncWithHttpInfo (string reference, bool? SIMULATION, string language = null);
        /// <summary>
        /// confirm hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of HotelConfirmationResponse</returns>
        System.Threading.Tasks.Task<HotelConfirmationResponse> HotelBookingConfirmationAsync (HotelConfirmationRequest body = null);

        /// <summary>
        /// confirm hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelConfirmationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HotelConfirmationResponse>> HotelBookingConfirmationAsyncWithHttpInfo (HotelConfirmationRequest body = null);
        /// <summary>
        /// check hotel rating
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of HotelCheckRatesResponse</returns>
        System.Threading.Tasks.Task<HotelCheckRatesResponse> HotelCheckRateAsync (HotelCheckRatesRequest body = null);

        /// <summary>
        /// check hotel rating
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelCheckRatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HotelCheckRatesResponse>> HotelCheckRateAsyncWithHttpInfo (HotelCheckRatesRequest body = null);
        /// <summary>
        /// retrieve hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>Task of HotelRetrieveBookingResponse</returns>
        System.Threading.Tasks.Task<HotelRetrieveBookingResponse> HotelRetrieveBookingAsync (string reference, string language = null);

        /// <summary>
        /// retrieve hotel booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelRetrieveBookingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HotelRetrieveBookingResponse>> HotelRetrieveBookingAsyncWithHttpInfo (string reference, string language = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class HotelApi : IHotelApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HotelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HotelApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HotelApi"/> class
        /// </summary>
        /// <returns></returns>
        public HotelApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HotelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HotelApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// list bookable hotels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>HotelAvailabilityResponse</returns>
        public HotelAvailabilityResponse HotelAvailability (HotelAvailabilityRequest body = null)
        {
             ApiResponse<HotelAvailabilityResponse> localVarResponse = HotelAvailabilityWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list bookable hotels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of HotelAvailabilityResponse</returns>
        public ApiResponse< HotelAvailabilityResponse > HotelAvailabilityWithHttpInfo (HotelAvailabilityRequest body = null)
        {

            var localVarPath = "/v1/hotel/booking/availability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelAvailability", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelAvailabilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelAvailabilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelAvailabilityResponse)));
        }

        /// <summary>
        /// list bookable hotels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of HotelAvailabilityResponse</returns>
        public async System.Threading.Tasks.Task<HotelAvailabilityResponse> HotelAvailabilityAsync (HotelAvailabilityRequest body = null)
        {
             ApiResponse<HotelAvailabilityResponse> localVarResponse = await HotelAvailabilityAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list bookable hotels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelAvailabilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HotelAvailabilityResponse>> HotelAvailabilityAsyncWithHttpInfo (HotelAvailabilityRequest body = null)
        {

            var localVarPath = "/v1/hotel/booking/availability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelAvailability", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelAvailabilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelAvailabilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelAvailabilityResponse)));
        }

        /// <summary>
        /// cancel hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="SIMULATION"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>HotelCancellationResponse</returns>
        public HotelCancellationResponse HotelBookingCancellation (string reference, bool? SIMULATION, string language = null)
        {
             ApiResponse<HotelCancellationResponse> localVarResponse = HotelBookingCancellationWithHttpInfo(reference, SIMULATION, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// cancel hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="SIMULATION"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of HotelCancellationResponse</returns>
        public ApiResponse< HotelCancellationResponse > HotelBookingCancellationWithHttpInfo (string reference, bool? SIMULATION, string language = null)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
                throw new ApiException(400, "Missing required parameter 'reference' when calling HotelApi->HotelBookingCancellation");
            // verify the required parameter 'SIMULATION' is set
            if (SIMULATION == null)
                throw new ApiException(400, "Missing required parameter 'SIMULATION' when calling HotelApi->HotelBookingCancellation");

            var localVarPath = "/v1/hotel/booking/cancellation/{reference}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reference != null) localVarPathParams.Add("reference", this.Configuration.ApiClient.ParameterToString(reference)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (SIMULATION != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SIMULATION", SIMULATION)); // query parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelBookingCancellation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelCancellationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelCancellationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelCancellationResponse)));
        }

        /// <summary>
        /// cancel hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="SIMULATION"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>Task of HotelCancellationResponse</returns>
        public async System.Threading.Tasks.Task<HotelCancellationResponse> HotelBookingCancellationAsync (string reference, bool? SIMULATION, string language = null)
        {
             ApiResponse<HotelCancellationResponse> localVarResponse = await HotelBookingCancellationAsyncWithHttpInfo(reference, SIMULATION, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// cancel hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="SIMULATION"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelCancellationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HotelCancellationResponse>> HotelBookingCancellationAsyncWithHttpInfo (string reference, bool? SIMULATION, string language = null)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
                throw new ApiException(400, "Missing required parameter 'reference' when calling HotelApi->HotelBookingCancellation");
            // verify the required parameter 'SIMULATION' is set
            if (SIMULATION == null)
                throw new ApiException(400, "Missing required parameter 'SIMULATION' when calling HotelApi->HotelBookingCancellation");

            var localVarPath = "/v1/hotel/booking/cancellation/{reference}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reference != null) localVarPathParams.Add("reference", this.Configuration.ApiClient.ParameterToString(reference)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (SIMULATION != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SIMULATION", SIMULATION)); // query parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelBookingCancellation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelCancellationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelCancellationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelCancellationResponse)));
        }

        /// <summary>
        /// confirm hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>HotelConfirmationResponse</returns>
        public HotelConfirmationResponse HotelBookingConfirmation (HotelConfirmationRequest body = null)
        {
             ApiResponse<HotelConfirmationResponse> localVarResponse = HotelBookingConfirmationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// confirm hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of HotelConfirmationResponse</returns>
        public ApiResponse< HotelConfirmationResponse > HotelBookingConfirmationWithHttpInfo (HotelConfirmationRequest body = null)
        {

            var localVarPath = "/v1/hotel/booking/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelBookingConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelConfirmationResponse)));
        }

        /// <summary>
        /// confirm hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of HotelConfirmationResponse</returns>
        public async System.Threading.Tasks.Task<HotelConfirmationResponse> HotelBookingConfirmationAsync (HotelConfirmationRequest body = null)
        {
             ApiResponse<HotelConfirmationResponse> localVarResponse = await HotelBookingConfirmationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// confirm hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelConfirmationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HotelConfirmationResponse>> HotelBookingConfirmationAsyncWithHttpInfo (HotelConfirmationRequest body = null)
        {

            var localVarPath = "/v1/hotel/booking/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelBookingConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelConfirmationResponse)));
        }

        /// <summary>
        /// check hotel rating 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>HotelCheckRatesResponse</returns>
        public HotelCheckRatesResponse HotelCheckRate (HotelCheckRatesRequest body = null)
        {
             ApiResponse<HotelCheckRatesResponse> localVarResponse = HotelCheckRateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// check hotel rating 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of HotelCheckRatesResponse</returns>
        public ApiResponse< HotelCheckRatesResponse > HotelCheckRateWithHttpInfo (HotelCheckRatesRequest body = null)
        {

            var localVarPath = "/v1/hotel/booking/checkrate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelCheckRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelCheckRatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelCheckRatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelCheckRatesResponse)));
        }

        /// <summary>
        /// check hotel rating 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of HotelCheckRatesResponse</returns>
        public async System.Threading.Tasks.Task<HotelCheckRatesResponse> HotelCheckRateAsync (HotelCheckRatesRequest body = null)
        {
             ApiResponse<HotelCheckRatesResponse> localVarResponse = await HotelCheckRateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// check hotel rating 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelCheckRatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HotelCheckRatesResponse>> HotelCheckRateAsyncWithHttpInfo (HotelCheckRatesRequest body = null)
        {

            var localVarPath = "/v1/hotel/booking/checkrate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelCheckRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelCheckRatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelCheckRatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelCheckRatesResponse)));
        }

        /// <summary>
        /// retrieve hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>HotelRetrieveBookingResponse</returns>
        public HotelRetrieveBookingResponse HotelRetrieveBooking (string reference, string language = null)
        {
             ApiResponse<HotelRetrieveBookingResponse> localVarResponse = HotelRetrieveBookingWithHttpInfo(reference, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieve hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of HotelRetrieveBookingResponse</returns>
        public ApiResponse< HotelRetrieveBookingResponse > HotelRetrieveBookingWithHttpInfo (string reference, string language = null)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
                throw new ApiException(400, "Missing required parameter 'reference' when calling HotelApi->HotelRetrieveBooking");

            var localVarPath = "/v1/hotel/booking/{reference}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reference != null) localVarPathParams.Add("reference", this.Configuration.ApiClient.ParameterToString(reference)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelRetrieveBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelRetrieveBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelRetrieveBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelRetrieveBookingResponse)));
        }

        /// <summary>
        /// retrieve hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>Task of HotelRetrieveBookingResponse</returns>
        public async System.Threading.Tasks.Task<HotelRetrieveBookingResponse> HotelRetrieveBookingAsync (string reference, string language = null)
        {
             ApiResponse<HotelRetrieveBookingResponse> localVarResponse = await HotelRetrieveBookingAsyncWithHttpInfo(reference, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve hotel booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="language"> (optional)</param>
        /// <returns>Task of ApiResponse (HotelRetrieveBookingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HotelRetrieveBookingResponse>> HotelRetrieveBookingAsyncWithHttpInfo (string reference, string language = null)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
                throw new ApiException(400, "Missing required parameter 'reference' when calling HotelApi->HotelRetrieveBooking");

            var localVarPath = "/v1/hotel/booking/{reference}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reference != null) localVarPathParams.Add("reference", this.Configuration.ApiClient.ParameterToString(reference)); // path parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (api_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION")))
            {
                localVarHeaderParams["X-AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("X-AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HotelRetrieveBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HotelRetrieveBookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HotelRetrieveBookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HotelRetrieveBookingResponse)));
        }

    }
}
