/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing FlightApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FlightApiTests
    {
        private FlightApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FlightApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FlightApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FlightApi
            //Assert.IsInstanceOfType(typeof(FlightApi), instance, "instance is a FlightApi");
        }

        /// <summary>
        /// Test FlightAirportAutocomplete
        /// </summary>
        [Test]
        public void FlightAirportAutocompleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string term = null;
            //var response = instance.FlightAirportAutocomplete(term);
            //Assert.IsInstanceOf<FlightAirportAutocompleteResponse> (response, "response is FlightAirportAutocompleteResponse");
        }
        /// <summary>
        /// Test FlightAvailability
        /// </summary>
        [Test]
        public void FlightAvailabilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FlightAvailabilityRequest body = null;
            //var response = instance.FlightAvailability(body);
            //Assert.IsInstanceOf<FlightAvailabilityResponse> (response, "response is FlightAvailabilityResponse");
        }
        /// <summary>
        /// Test FlightBookingConfirmaiton
        /// </summary>
        [Test]
        public void FlightBookingConfirmaitonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FlightConfirmationRequest body = null;
            //var response = instance.FlightBookingConfirmaiton(body);
            //Assert.IsInstanceOf<FlightBookingResponse> (response, "response is FlightBookingResponse");
        }
        /// <summary>
        /// Test FlightFare
        /// </summary>
        [Test]
        public void FlightFareTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FlightBookingKeyRequest body = null;
            //var response = instance.FlightFare(body);
            //Assert.IsInstanceOf<FlightFareResponse> (response, "response is FlightFareResponse");
        }
        /// <summary>
        /// Test FlightFareRules
        /// </summary>
        [Test]
        public void FlightFareRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FlightBookingKeyRequest body = null;
            //var response = instance.FlightFareRules(body);
            //Assert.IsInstanceOf<FlightFareRulesResponse> (response, "response is FlightFareRulesResponse");
        }
        /// <summary>
        /// Test FlightOnHoldBookingConfirmation
        /// </summary>
        [Test]
        public void FlightOnHoldBookingConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string bookingId = null;
            //var response = instance.FlightOnHoldBookingConfirmation(bookingId);
            //Assert.IsInstanceOf<FlightBookingResponse> (response, "response is FlightBookingResponse");
        }
        /// <summary>
        /// Test FlightRefreshPNR
        /// </summary>
        [Test]
        public void FlightRefreshPNRTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string bookingId = null;
            //var response = instance.FlightRefreshPNR(bookingId);
            //Assert.IsInstanceOf<FlightBookingResponse> (response, "response is FlightBookingResponse");
        }
        /// <summary>
        /// Test FlightRetrievePNR
        /// </summary>
        [Test]
        public void FlightRetrievePNRTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string recordLocator = null;
            //var response = instance.FlightRetrievePNR(recordLocator);
            //Assert.IsInstanceOf<FlightBookingResponse> (response, "response is FlightBookingResponse");
        }
        /// <summary>
        /// Test FlightVoidPNR
        /// </summary>
        [Test]
        public void FlightVoidPNRTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string bookingId = null;
            //var response = instance.FlightVoidPNR(bookingId);
            //Assert.IsInstanceOf<FlightBookingResponse> (response, "response is FlightBookingResponse");
        }
    }

}
