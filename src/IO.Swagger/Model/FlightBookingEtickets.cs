/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightBookingEtickets
    /// </summary>
    [DataContract]
        public partial class FlightBookingEtickets :  IEquatable<FlightBookingEtickets>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightBookingEtickets" /> class.
        /// </summary>
        /// <param name="paxName">paxName.</param>
        /// <param name="status">status.</param>
        /// <param name="ticketNumber">ticketNumber.</param>
        /// <param name="type">type.</param>
        public FlightBookingEtickets(string paxName = default(string), string status = default(string), string ticketNumber = default(string), string type = default(string))
        {
            this.PaxName = paxName;
            this.Status = status;
            this.TicketNumber = ticketNumber;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets PaxName
        /// </summary>
        [DataMember(Name="pax_name", EmitDefaultValue=false)]
        public string PaxName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TicketNumber
        /// </summary>
        [DataMember(Name="ticket_number", EmitDefaultValue=false)]
        public string TicketNumber { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightBookingEtickets {\n");
            sb.Append("  PaxName: ").Append(PaxName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightBookingEtickets);
        }

        /// <summary>
        /// Returns true if FlightBookingEtickets instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightBookingEtickets to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightBookingEtickets input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaxName == input.PaxName ||
                    (this.PaxName != null &&
                    this.PaxName.Equals(input.PaxName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TicketNumber == input.TicketNumber ||
                    (this.TicketNumber != null &&
                    this.TicketNumber.Equals(input.TicketNumber))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaxName != null)
                    hashCode = hashCode * 59 + this.PaxName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TicketNumber != null)
                    hashCode = hashCode * 59 + this.TicketNumber.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
