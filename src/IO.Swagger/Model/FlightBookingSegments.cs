/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightBookingSegments
    /// </summary>
    [DataContract]
        public partial class FlightBookingSegments :  IEquatable<FlightBookingSegments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightBookingSegments" /> class.
        /// </summary>
        /// <param name="arrivalTerminal">arrivalTerminal.</param>
        /// <param name="arrivalDate">arrivalDate.</param>
        /// <param name="arrivalLocation">arrivalLocation.</param>
        /// <param name="arrivalTime">arrivalTime.</param>
        /// <param name="baggageInfo">baggageInfo.</param>
        /// <param name="bookingClass">bookingClass.</param>
        /// <param name="boundId">boundId.</param>
        /// <param name="carrier">carrier.</param>
        /// <param name="departureTerminal">departureTerminal.</param>
        /// <param name="departureDate">departureDate.</param>
        /// <param name="departureLocation">departureLocation.</param>
        /// <param name="departureTime">departureTime.</param>
        /// <param name="flightEquipment">flightEquipment.</param>
        /// <param name="flightNumber">flightNumber.</param>
        /// <param name="id">id.</param>
        public FlightBookingSegments(string arrivalTerminal = default(string), string arrivalDate = default(string), FlightBookingArrivalLocation arrivalLocation = default(FlightBookingArrivalLocation), string arrivalTime = default(string), string baggageInfo = default(string), string bookingClass = default(string), int? boundId = default(int?), string carrier = default(string), string departureTerminal = default(string), string departureDate = default(string), FlightBookingArrivalLocation departureLocation = default(FlightBookingArrivalLocation), string departureTime = default(string), string flightEquipment = default(string), string flightNumber = default(string), int? id = default(int?))
        {
            this.ArrivalTerminal = arrivalTerminal;
            this.ArrivalDate = arrivalDate;
            this.ArrivalLocation = arrivalLocation;
            this.ArrivalTime = arrivalTime;
            this.BaggageInfo = baggageInfo;
            this.BookingClass = bookingClass;
            this.BoundId = boundId;
            this.Carrier = carrier;
            this.DepartureTerminal = departureTerminal;
            this.DepartureDate = departureDate;
            this.DepartureLocation = departureLocation;
            this.DepartureTime = departureTime;
            this.FlightEquipment = flightEquipment;
            this.FlightNumber = flightNumber;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets ArrivalTerminal
        /// </summary>
        [DataMember(Name="arrivalTerminal", EmitDefaultValue=false)]
        public string ArrivalTerminal { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalDate
        /// </summary>
        [DataMember(Name="arrival_date", EmitDefaultValue=false)]
        public string ArrivalDate { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalLocation
        /// </summary>
        [DataMember(Name="arrival_location", EmitDefaultValue=false)]
        public FlightBookingArrivalLocation ArrivalLocation { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalTime
        /// </summary>
        [DataMember(Name="arrival_time", EmitDefaultValue=false)]
        public string ArrivalTime { get; set; }

        /// <summary>
        /// Gets or Sets BaggageInfo
        /// </summary>
        [DataMember(Name="baggage_info", EmitDefaultValue=false)]
        public string BaggageInfo { get; set; }

        /// <summary>
        /// Gets or Sets BookingClass
        /// </summary>
        [DataMember(Name="booking_class", EmitDefaultValue=false)]
        public string BookingClass { get; set; }

        /// <summary>
        /// Gets or Sets BoundId
        /// </summary>
        [DataMember(Name="bound_id", EmitDefaultValue=false)]
        public int? BoundId { get; set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }

        /// <summary>
        /// Gets or Sets DepartureTerminal
        /// </summary>
        [DataMember(Name="departureTerminal", EmitDefaultValue=false)]
        public string DepartureTerminal { get; set; }

        /// <summary>
        /// Gets or Sets DepartureDate
        /// </summary>
        [DataMember(Name="departure_date", EmitDefaultValue=false)]
        public string DepartureDate { get; set; }

        /// <summary>
        /// Gets or Sets DepartureLocation
        /// </summary>
        [DataMember(Name="departure_location", EmitDefaultValue=false)]
        public FlightBookingArrivalLocation DepartureLocation { get; set; }

        /// <summary>
        /// Gets or Sets DepartureTime
        /// </summary>
        [DataMember(Name="departure_time", EmitDefaultValue=false)]
        public string DepartureTime { get; set; }

        /// <summary>
        /// Gets or Sets FlightEquipment
        /// </summary>
        [DataMember(Name="flight_equipment", EmitDefaultValue=false)]
        public string FlightEquipment { get; set; }

        /// <summary>
        /// Gets or Sets FlightNumber
        /// </summary>
        [DataMember(Name="flight_number", EmitDefaultValue=false)]
        public string FlightNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightBookingSegments {\n");
            sb.Append("  ArrivalTerminal: ").Append(ArrivalTerminal).Append("\n");
            sb.Append("  ArrivalDate: ").Append(ArrivalDate).Append("\n");
            sb.Append("  ArrivalLocation: ").Append(ArrivalLocation).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  BaggageInfo: ").Append(BaggageInfo).Append("\n");
            sb.Append("  BookingClass: ").Append(BookingClass).Append("\n");
            sb.Append("  BoundId: ").Append(BoundId).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  DepartureTerminal: ").Append(DepartureTerminal).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  DepartureLocation: ").Append(DepartureLocation).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  FlightEquipment: ").Append(FlightEquipment).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightBookingSegments);
        }

        /// <summary>
        /// Returns true if FlightBookingSegments instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightBookingSegments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightBookingSegments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArrivalTerminal == input.ArrivalTerminal ||
                    (this.ArrivalTerminal != null &&
                    this.ArrivalTerminal.Equals(input.ArrivalTerminal))
                ) && 
                (
                    this.ArrivalDate == input.ArrivalDate ||
                    (this.ArrivalDate != null &&
                    this.ArrivalDate.Equals(input.ArrivalDate))
                ) && 
                (
                    this.ArrivalLocation == input.ArrivalLocation ||
                    (this.ArrivalLocation != null &&
                    this.ArrivalLocation.Equals(input.ArrivalLocation))
                ) && 
                (
                    this.ArrivalTime == input.ArrivalTime ||
                    (this.ArrivalTime != null &&
                    this.ArrivalTime.Equals(input.ArrivalTime))
                ) && 
                (
                    this.BaggageInfo == input.BaggageInfo ||
                    (this.BaggageInfo != null &&
                    this.BaggageInfo.Equals(input.BaggageInfo))
                ) && 
                (
                    this.BookingClass == input.BookingClass ||
                    (this.BookingClass != null &&
                    this.BookingClass.Equals(input.BookingClass))
                ) && 
                (
                    this.BoundId == input.BoundId ||
                    (this.BoundId != null &&
                    this.BoundId.Equals(input.BoundId))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.DepartureTerminal == input.DepartureTerminal ||
                    (this.DepartureTerminal != null &&
                    this.DepartureTerminal.Equals(input.DepartureTerminal))
                ) && 
                (
                    this.DepartureDate == input.DepartureDate ||
                    (this.DepartureDate != null &&
                    this.DepartureDate.Equals(input.DepartureDate))
                ) && 
                (
                    this.DepartureLocation == input.DepartureLocation ||
                    (this.DepartureLocation != null &&
                    this.DepartureLocation.Equals(input.DepartureLocation))
                ) && 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.FlightEquipment == input.FlightEquipment ||
                    (this.FlightEquipment != null &&
                    this.FlightEquipment.Equals(input.FlightEquipment))
                ) && 
                (
                    this.FlightNumber == input.FlightNumber ||
                    (this.FlightNumber != null &&
                    this.FlightNumber.Equals(input.FlightNumber))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArrivalTerminal != null)
                    hashCode = hashCode * 59 + this.ArrivalTerminal.GetHashCode();
                if (this.ArrivalDate != null)
                    hashCode = hashCode * 59 + this.ArrivalDate.GetHashCode();
                if (this.ArrivalLocation != null)
                    hashCode = hashCode * 59 + this.ArrivalLocation.GetHashCode();
                if (this.ArrivalTime != null)
                    hashCode = hashCode * 59 + this.ArrivalTime.GetHashCode();
                if (this.BaggageInfo != null)
                    hashCode = hashCode * 59 + this.BaggageInfo.GetHashCode();
                if (this.BookingClass != null)
                    hashCode = hashCode * 59 + this.BookingClass.GetHashCode();
                if (this.BoundId != null)
                    hashCode = hashCode * 59 + this.BoundId.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.DepartureTerminal != null)
                    hashCode = hashCode * 59 + this.DepartureTerminal.GetHashCode();
                if (this.DepartureDate != null)
                    hashCode = hashCode * 59 + this.DepartureDate.GetHashCode();
                if (this.DepartureLocation != null)
                    hashCode = hashCode * 59 + this.DepartureLocation.GetHashCode();
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                if (this.FlightEquipment != null)
                    hashCode = hashCode * 59 + this.FlightEquipment.GetHashCode();
                if (this.FlightNumber != null)
                    hashCode = hashCode * 59 + this.FlightNumber.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
