/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HotelConfirmationResponseBooking
    /// </summary>
    [DataContract]
        public partial class HotelConfirmationResponseBooking :  IEquatable<HotelConfirmationResponseBooking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelConfirmationResponseBooking" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="created">created.</param>
        /// <param name="reference">reference.</param>
        /// <param name="comments">comments.</param>
        /// <param name="totalPrice">totalPrice.</param>
        /// <param name="currency">currency.</param>
        /// <param name="checkIn">checkIn.</param>
        /// <param name="checkOut">checkOut.</param>
        /// <param name="holder">holder.</param>
        /// <param name="hotel">hotel.</param>
        public HotelConfirmationResponseBooking(string status = default(string), string created = default(string), string reference = default(string), string comments = default(string), string totalPrice = default(string), string currency = default(string), string checkIn = default(string), string checkOut = default(string), HotelConfirmationRequestHolder holder = default(HotelConfirmationRequestHolder), HotelConfirmationResponseBookingHotel hotel = default(HotelConfirmationResponseBookingHotel))
        {
            this.Status = status;
            this.Created = created;
            this.Reference = reference;
            this.Comments = comments;
            this.TotalPrice = totalPrice;
            this.Currency = currency;
            this.CheckIn = checkIn;
            this.CheckOut = checkOut;
            this.Holder = holder;
            this.Hotel = hotel;
        }
        
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [DataMember(Name="totalPrice", EmitDefaultValue=false)]
        public string TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CheckIn
        /// </summary>
        [DataMember(Name="checkIn", EmitDefaultValue=false)]
        public string CheckIn { get; set; }

        /// <summary>
        /// Gets or Sets CheckOut
        /// </summary>
        [DataMember(Name="checkOut", EmitDefaultValue=false)]
        public string CheckOut { get; set; }

        /// <summary>
        /// Gets or Sets Holder
        /// </summary>
        [DataMember(Name="holder", EmitDefaultValue=false)]
        public HotelConfirmationRequestHolder Holder { get; set; }

        /// <summary>
        /// Gets or Sets Hotel
        /// </summary>
        [DataMember(Name="hotel", EmitDefaultValue=false)]
        public HotelConfirmationResponseBookingHotel Hotel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelConfirmationResponseBooking {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CheckIn: ").Append(CheckIn).Append("\n");
            sb.Append("  CheckOut: ").Append(CheckOut).Append("\n");
            sb.Append("  Holder: ").Append(Holder).Append("\n");
            sb.Append("  Hotel: ").Append(Hotel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HotelConfirmationResponseBooking);
        }

        /// <summary>
        /// Returns true if HotelConfirmationResponseBooking instances are equal
        /// </summary>
        /// <param name="input">Instance of HotelConfirmationResponseBooking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelConfirmationResponseBooking input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    (this.TotalPrice != null &&
                    this.TotalPrice.Equals(input.TotalPrice))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CheckIn == input.CheckIn ||
                    (this.CheckIn != null &&
                    this.CheckIn.Equals(input.CheckIn))
                ) && 
                (
                    this.CheckOut == input.CheckOut ||
                    (this.CheckOut != null &&
                    this.CheckOut.Equals(input.CheckOut))
                ) && 
                (
                    this.Holder == input.Holder ||
                    (this.Holder != null &&
                    this.Holder.Equals(input.Holder))
                ) && 
                (
                    this.Hotel == input.Hotel ||
                    (this.Hotel != null &&
                    this.Hotel.Equals(input.Hotel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.TotalPrice != null)
                    hashCode = hashCode * 59 + this.TotalPrice.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CheckIn != null)
                    hashCode = hashCode * 59 + this.CheckIn.GetHashCode();
                if (this.CheckOut != null)
                    hashCode = hashCode * 59 + this.CheckOut.GetHashCode();
                if (this.Holder != null)
                    hashCode = hashCode * 59 + this.Holder.GetHashCode();
                if (this.Hotel != null)
                    hashCode = hashCode * 59 + this.Hotel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
