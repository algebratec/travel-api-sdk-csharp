/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightRecommendation
    /// </summary>
    [DataContract]
        public partial class FlightRecommendation :  IEquatable<FlightRecommendation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightRecommendation" /> class.
        /// </summary>
        /// <param name="baggage">baggage.</param>
        /// <param name="bookingKey">bookingKey.</param>
        /// <param name="fareDetails">fareDetails.</param>
        /// <param name="flights">flights.</param>
        /// <param name="price">price.</param>
        /// <param name="subRecommendations">subRecommendations.</param>
        /// <param name="validatingCarrier">validatingCarrier.</param>
        public FlightRecommendation(FlightBaggageAllowance baggage = default(FlightBaggageAllowance), string bookingKey = default(string), List<List<FlightAvailabilityFareDetails>> fareDetails = default(List<List<FlightAvailabilityFareDetails>>), List<List<int?>> flights = default(List<List<int?>>), FlightDetailedPrice price = default(FlightDetailedPrice), List<List<FlightAvailabilitySubRecommendation>> subRecommendations = default(List<List<FlightAvailabilitySubRecommendation>>), string validatingCarrier = default(string))
        {
            this.Baggage = baggage;
            this.BookingKey = bookingKey;
            this.FareDetails = fareDetails;
            this.Flights = flights;
            this.Price = price;
            this.SubRecommendations = subRecommendations;
            this.ValidatingCarrier = validatingCarrier;
        }
        
        /// <summary>
        /// Gets or Sets Baggage
        /// </summary>
        [DataMember(Name="baggage", EmitDefaultValue=false)]
        public FlightBaggageAllowance Baggage { get; set; }

        /// <summary>
        /// Gets or Sets BookingKey
        /// </summary>
        [DataMember(Name="bookingKey", EmitDefaultValue=false)]
        public string BookingKey { get; set; }

        /// <summary>
        /// Gets or Sets FareDetails
        /// </summary>
        [DataMember(Name="fareDetails", EmitDefaultValue=false)]
        public List<List<FlightAvailabilityFareDetails>> FareDetails { get; set; }

        /// <summary>
        /// Gets or Sets Flights
        /// </summary>
        [DataMember(Name="flights", EmitDefaultValue=false)]
        public List<List<int?>> Flights { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public FlightDetailedPrice Price { get; set; }

        /// <summary>
        /// Gets or Sets SubRecommendations
        /// </summary>
        [DataMember(Name="subRecommendations", EmitDefaultValue=false)]
        public List<List<FlightAvailabilitySubRecommendation>> SubRecommendations { get; set; }

        /// <summary>
        /// Gets or Sets ValidatingCarrier
        /// </summary>
        [DataMember(Name="validatingCarrier", EmitDefaultValue=false)]
        public string ValidatingCarrier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightRecommendation {\n");
            sb.Append("  Baggage: ").Append(Baggage).Append("\n");
            sb.Append("  BookingKey: ").Append(BookingKey).Append("\n");
            sb.Append("  FareDetails: ").Append(FareDetails).Append("\n");
            sb.Append("  Flights: ").Append(Flights).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SubRecommendations: ").Append(SubRecommendations).Append("\n");
            sb.Append("  ValidatingCarrier: ").Append(ValidatingCarrier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightRecommendation);
        }

        /// <summary>
        /// Returns true if FlightRecommendation instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightRecommendation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightRecommendation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Baggage == input.Baggage ||
                    (this.Baggage != null &&
                    this.Baggage.Equals(input.Baggage))
                ) && 
                (
                    this.BookingKey == input.BookingKey ||
                    (this.BookingKey != null &&
                    this.BookingKey.Equals(input.BookingKey))
                ) && 
                (
                    this.FareDetails == input.FareDetails ||
                    this.FareDetails != null &&
                    input.FareDetails != null &&
                    this.FareDetails.SequenceEqual(input.FareDetails)
                ) && 
                (
                    this.Flights == input.Flights ||
                    this.Flights != null &&
                    input.Flights != null &&
                    this.Flights.SequenceEqual(input.Flights)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.SubRecommendations == input.SubRecommendations ||
                    this.SubRecommendations != null &&
                    input.SubRecommendations != null &&
                    this.SubRecommendations.SequenceEqual(input.SubRecommendations)
                ) && 
                (
                    this.ValidatingCarrier == input.ValidatingCarrier ||
                    (this.ValidatingCarrier != null &&
                    this.ValidatingCarrier.Equals(input.ValidatingCarrier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Baggage != null)
                    hashCode = hashCode * 59 + this.Baggage.GetHashCode();
                if (this.BookingKey != null)
                    hashCode = hashCode * 59 + this.BookingKey.GetHashCode();
                if (this.FareDetails != null)
                    hashCode = hashCode * 59 + this.FareDetails.GetHashCode();
                if (this.Flights != null)
                    hashCode = hashCode * 59 + this.Flights.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.SubRecommendations != null)
                    hashCode = hashCode * 59 + this.SubRecommendations.GetHashCode();
                if (this.ValidatingCarrier != null)
                    hashCode = hashCode * 59 + this.ValidatingCarrier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
