/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightBooking
    /// </summary>
    [DataContract]
        public partial class FlightBooking :  IEquatable<FlightBooking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightBooking" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="airlines">airlines.</param>
        /// <param name="bookingCanBeVoid">bookingCanBeVoid.</param>
        /// <param name="bookingClass">bookingClass.</param>
        /// <param name="bookingDate">bookingDate.</param>
        /// <param name="bookingNeedExchangeDocuments">bookingNeedExchangeDocuments.</param>
        /// <param name="bounds">bounds.</param>
        /// <param name="canceled">canceled.</param>
        /// <param name="confirmed">confirmed.</param>
        /// <param name="couldNotRetrieveEtickets">couldNotRetrieveEtickets.</param>
        /// <param name="customer">customer.</param>
        /// <param name="customerId">customerId.</param>
        /// <param name="destination">destination.</param>
        /// <param name="etickets">etickets.</param>
        /// <param name="history">history.</param>
        /// <param name="modified">modified.</param>
        /// <param name="offline">offline.</param>
        /// <param name="optionDeadline">optionDeadline.</param>
        /// <param name="origin">origin.</param>
        /// <param name="paxNumber">paxNumber.</param>
        /// <param name="pending">pending.</param>
        /// <param name="pnr">pnr.</param>
        /// <param name="price">price.</param>
        /// <param name="provider">provider.</param>
        /// <param name="queued">queued.</param>
        /// <param name="reference">reference.</param>
        /// <param name="refund">refund.</param>
        /// <param name="routing">routing.</param>
        /// <param name="status">status.</param>
        /// <param name="ticketed">ticketed.</param>
        /// <param name="tripType">tripType.</param>
        /// <param name="validatingCarrier">validatingCarrier.</param>
        public FlightBooking(int? id = default(int?), List<FlightAirline> airlines = default(List<FlightAirline>), bool? bookingCanBeVoid = default(bool?), string bookingClass = default(string), string bookingDate = default(string), bool? bookingNeedExchangeDocuments = default(bool?), List<FlightBookingBounds> bounds = default(List<FlightBookingBounds>), bool? canceled = default(bool?), bool? confirmed = default(bool?), bool? couldNotRetrieveEtickets = default(bool?), FlightBookingCustomer customer = default(FlightBookingCustomer), int? customerId = default(int?), string destination = default(string), List<FlightBookingEtickets> etickets = default(List<FlightBookingEtickets>), List<FlightBookingHistory> history = default(List<FlightBookingHistory>), bool? modified = default(bool?), bool? offline = default(bool?), string optionDeadline = default(string), string origin = default(string), int? paxNumber = default(int?), bool? pending = default(bool?), string pnr = default(string), FlightDetailedPrice price = default(FlightDetailedPrice), string provider = default(string), bool? queued = default(bool?), string reference = default(string), FlightDetailedPrice refund = default(FlightDetailedPrice), string routing = default(string), string status = default(string), bool? ticketed = default(bool?), string tripType = default(string), string validatingCarrier = default(string))
        {
            this.Id = id;
            this.Airlines = airlines;
            this.BookingCanBeVoid = bookingCanBeVoid;
            this.BookingClass = bookingClass;
            this.BookingDate = bookingDate;
            this.BookingNeedExchangeDocuments = bookingNeedExchangeDocuments;
            this.Bounds = bounds;
            this.Canceled = canceled;
            this.Confirmed = confirmed;
            this.CouldNotRetrieveEtickets = couldNotRetrieveEtickets;
            this.Customer = customer;
            this.CustomerId = customerId;
            this.Destination = destination;
            this.Etickets = etickets;
            this.History = history;
            this.Modified = modified;
            this.Offline = offline;
            this.OptionDeadline = optionDeadline;
            this.Origin = origin;
            this.PaxNumber = paxNumber;
            this.Pending = pending;
            this.Pnr = pnr;
            this.Price = price;
            this.Provider = provider;
            this.Queued = queued;
            this.Reference = reference;
            this.Refund = refund;
            this.Routing = routing;
            this.Status = status;
            this.Ticketed = ticketed;
            this.TripType = tripType;
            this.ValidatingCarrier = validatingCarrier;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Airlines
        /// </summary>
        [DataMember(Name="airlines", EmitDefaultValue=false)]
        public List<FlightAirline> Airlines { get; set; }

        /// <summary>
        /// Gets or Sets BookingCanBeVoid
        /// </summary>
        [DataMember(Name="booking_can_be_void", EmitDefaultValue=false)]
        public bool? BookingCanBeVoid { get; set; }

        /// <summary>
        /// Gets or Sets BookingClass
        /// </summary>
        [DataMember(Name="booking_class", EmitDefaultValue=false)]
        public string BookingClass { get; set; }

        /// <summary>
        /// Gets or Sets BookingDate
        /// </summary>
        [DataMember(Name="booking_date", EmitDefaultValue=false)]
        public string BookingDate { get; set; }

        /// <summary>
        /// Gets or Sets BookingNeedExchangeDocuments
        /// </summary>
        [DataMember(Name="booking_need_exchange_documents", EmitDefaultValue=false)]
        public bool? BookingNeedExchangeDocuments { get; set; }

        /// <summary>
        /// Gets or Sets Bounds
        /// </summary>
        [DataMember(Name="bounds", EmitDefaultValue=false)]
        public List<FlightBookingBounds> Bounds { get; set; }

        /// <summary>
        /// Gets or Sets Canceled
        /// </summary>
        [DataMember(Name="canceled", EmitDefaultValue=false)]
        public bool? Canceled { get; set; }

        /// <summary>
        /// Gets or Sets Confirmed
        /// </summary>
        [DataMember(Name="confirmed", EmitDefaultValue=false)]
        public bool? Confirmed { get; set; }

        /// <summary>
        /// Gets or Sets CouldNotRetrieveEtickets
        /// </summary>
        [DataMember(Name="could_not_retrieve_etickets", EmitDefaultValue=false)]
        public bool? CouldNotRetrieveEtickets { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public FlightBookingCustomer Customer { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customer_id", EmitDefaultValue=false)]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets Etickets
        /// </summary>
        [DataMember(Name="etickets", EmitDefaultValue=false)]
        public List<FlightBookingEtickets> Etickets { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name="history", EmitDefaultValue=false)]
        public List<FlightBookingHistory> History { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public bool? Modified { get; set; }

        /// <summary>
        /// Gets or Sets Offline
        /// </summary>
        [DataMember(Name="offline", EmitDefaultValue=false)]
        public bool? Offline { get; set; }

        /// <summary>
        /// Gets or Sets OptionDeadline
        /// </summary>
        [DataMember(Name="option_deadline", EmitDefaultValue=false)]
        public string OptionDeadline { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets PaxNumber
        /// </summary>
        [DataMember(Name="pax_number", EmitDefaultValue=false)]
        public int? PaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets Pending
        /// </summary>
        [DataMember(Name="pending", EmitDefaultValue=false)]
        public bool? Pending { get; set; }

        /// <summary>
        /// Gets or Sets Pnr
        /// </summary>
        [DataMember(Name="pnr", EmitDefaultValue=false)]
        public string Pnr { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public FlightDetailedPrice Price { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets Queued
        /// </summary>
        [DataMember(Name="queued", EmitDefaultValue=false)]
        public bool? Queued { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Refund
        /// </summary>
        [DataMember(Name="refund", EmitDefaultValue=false)]
        public FlightDetailedPrice Refund { get; set; }

        /// <summary>
        /// Gets or Sets Routing
        /// </summary>
        [DataMember(Name="routing", EmitDefaultValue=false)]
        public string Routing { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Ticketed
        /// </summary>
        [DataMember(Name="ticketed", EmitDefaultValue=false)]
        public bool? Ticketed { get; set; }

        /// <summary>
        /// Gets or Sets TripType
        /// </summary>
        [DataMember(Name="trip_type", EmitDefaultValue=false)]
        public string TripType { get; set; }

        /// <summary>
        /// Gets or Sets ValidatingCarrier
        /// </summary>
        [DataMember(Name="validating_carrier", EmitDefaultValue=false)]
        public string ValidatingCarrier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightBooking {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Airlines: ").Append(Airlines).Append("\n");
            sb.Append("  BookingCanBeVoid: ").Append(BookingCanBeVoid).Append("\n");
            sb.Append("  BookingClass: ").Append(BookingClass).Append("\n");
            sb.Append("  BookingDate: ").Append(BookingDate).Append("\n");
            sb.Append("  BookingNeedExchangeDocuments: ").Append(BookingNeedExchangeDocuments).Append("\n");
            sb.Append("  Bounds: ").Append(Bounds).Append("\n");
            sb.Append("  Canceled: ").Append(Canceled).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  CouldNotRetrieveEtickets: ").Append(CouldNotRetrieveEtickets).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Etickets: ").Append(Etickets).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Offline: ").Append(Offline).Append("\n");
            sb.Append("  OptionDeadline: ").Append(OptionDeadline).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  PaxNumber: ").Append(PaxNumber).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  Pnr: ").Append(Pnr).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Refund: ").Append(Refund).Append("\n");
            sb.Append("  Routing: ").Append(Routing).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Ticketed: ").Append(Ticketed).Append("\n");
            sb.Append("  TripType: ").Append(TripType).Append("\n");
            sb.Append("  ValidatingCarrier: ").Append(ValidatingCarrier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightBooking);
        }

        /// <summary>
        /// Returns true if FlightBooking instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightBooking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightBooking input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Airlines == input.Airlines ||
                    this.Airlines != null &&
                    input.Airlines != null &&
                    this.Airlines.SequenceEqual(input.Airlines)
                ) && 
                (
                    this.BookingCanBeVoid == input.BookingCanBeVoid ||
                    (this.BookingCanBeVoid != null &&
                    this.BookingCanBeVoid.Equals(input.BookingCanBeVoid))
                ) && 
                (
                    this.BookingClass == input.BookingClass ||
                    (this.BookingClass != null &&
                    this.BookingClass.Equals(input.BookingClass))
                ) && 
                (
                    this.BookingDate == input.BookingDate ||
                    (this.BookingDate != null &&
                    this.BookingDate.Equals(input.BookingDate))
                ) && 
                (
                    this.BookingNeedExchangeDocuments == input.BookingNeedExchangeDocuments ||
                    (this.BookingNeedExchangeDocuments != null &&
                    this.BookingNeedExchangeDocuments.Equals(input.BookingNeedExchangeDocuments))
                ) && 
                (
                    this.Bounds == input.Bounds ||
                    this.Bounds != null &&
                    input.Bounds != null &&
                    this.Bounds.SequenceEqual(input.Bounds)
                ) && 
                (
                    this.Canceled == input.Canceled ||
                    (this.Canceled != null &&
                    this.Canceled.Equals(input.Canceled))
                ) && 
                (
                    this.Confirmed == input.Confirmed ||
                    (this.Confirmed != null &&
                    this.Confirmed.Equals(input.Confirmed))
                ) && 
                (
                    this.CouldNotRetrieveEtickets == input.CouldNotRetrieveEtickets ||
                    (this.CouldNotRetrieveEtickets != null &&
                    this.CouldNotRetrieveEtickets.Equals(input.CouldNotRetrieveEtickets))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Etickets == input.Etickets ||
                    this.Etickets != null &&
                    input.Etickets != null &&
                    this.Etickets.SequenceEqual(input.Etickets)
                ) && 
                (
                    this.History == input.History ||
                    this.History != null &&
                    input.History != null &&
                    this.History.SequenceEqual(input.History)
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Offline == input.Offline ||
                    (this.Offline != null &&
                    this.Offline.Equals(input.Offline))
                ) && 
                (
                    this.OptionDeadline == input.OptionDeadline ||
                    (this.OptionDeadline != null &&
                    this.OptionDeadline.Equals(input.OptionDeadline))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.PaxNumber == input.PaxNumber ||
                    (this.PaxNumber != null &&
                    this.PaxNumber.Equals(input.PaxNumber))
                ) && 
                (
                    this.Pending == input.Pending ||
                    (this.Pending != null &&
                    this.Pending.Equals(input.Pending))
                ) && 
                (
                    this.Pnr == input.Pnr ||
                    (this.Pnr != null &&
                    this.Pnr.Equals(input.Pnr))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Queued == input.Queued ||
                    (this.Queued != null &&
                    this.Queued.Equals(input.Queued))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Refund == input.Refund ||
                    (this.Refund != null &&
                    this.Refund.Equals(input.Refund))
                ) && 
                (
                    this.Routing == input.Routing ||
                    (this.Routing != null &&
                    this.Routing.Equals(input.Routing))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Ticketed == input.Ticketed ||
                    (this.Ticketed != null &&
                    this.Ticketed.Equals(input.Ticketed))
                ) && 
                (
                    this.TripType == input.TripType ||
                    (this.TripType != null &&
                    this.TripType.Equals(input.TripType))
                ) && 
                (
                    this.ValidatingCarrier == input.ValidatingCarrier ||
                    (this.ValidatingCarrier != null &&
                    this.ValidatingCarrier.Equals(input.ValidatingCarrier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Airlines != null)
                    hashCode = hashCode * 59 + this.Airlines.GetHashCode();
                if (this.BookingCanBeVoid != null)
                    hashCode = hashCode * 59 + this.BookingCanBeVoid.GetHashCode();
                if (this.BookingClass != null)
                    hashCode = hashCode * 59 + this.BookingClass.GetHashCode();
                if (this.BookingDate != null)
                    hashCode = hashCode * 59 + this.BookingDate.GetHashCode();
                if (this.BookingNeedExchangeDocuments != null)
                    hashCode = hashCode * 59 + this.BookingNeedExchangeDocuments.GetHashCode();
                if (this.Bounds != null)
                    hashCode = hashCode * 59 + this.Bounds.GetHashCode();
                if (this.Canceled != null)
                    hashCode = hashCode * 59 + this.Canceled.GetHashCode();
                if (this.Confirmed != null)
                    hashCode = hashCode * 59 + this.Confirmed.GetHashCode();
                if (this.CouldNotRetrieveEtickets != null)
                    hashCode = hashCode * 59 + this.CouldNotRetrieveEtickets.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.Etickets != null)
                    hashCode = hashCode * 59 + this.Etickets.GetHashCode();
                if (this.History != null)
                    hashCode = hashCode * 59 + this.History.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Offline != null)
                    hashCode = hashCode * 59 + this.Offline.GetHashCode();
                if (this.OptionDeadline != null)
                    hashCode = hashCode * 59 + this.OptionDeadline.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.PaxNumber != null)
                    hashCode = hashCode * 59 + this.PaxNumber.GetHashCode();
                if (this.Pending != null)
                    hashCode = hashCode * 59 + this.Pending.GetHashCode();
                if (this.Pnr != null)
                    hashCode = hashCode * 59 + this.Pnr.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Queued != null)
                    hashCode = hashCode * 59 + this.Queued.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Refund != null)
                    hashCode = hashCode * 59 + this.Refund.GetHashCode();
                if (this.Routing != null)
                    hashCode = hashCode * 59 + this.Routing.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Ticketed != null)
                    hashCode = hashCode * 59 + this.Ticketed.GetHashCode();
                if (this.TripType != null)
                    hashCode = hashCode * 59 + this.TripType.GetHashCode();
                if (this.ValidatingCarrier != null)
                    hashCode = hashCode * 59 + this.ValidatingCarrier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
