/* 
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FlightAvailability
    /// </summary>
    [DataContract]
        public partial class FlightAvailability :  IEquatable<FlightAvailability>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightAvailability" /> class.
        /// </summary>
        /// <param name="airlineDictionary">airlineDictionary.</param>
        /// <param name="airportDictionary">airportDictionary.</param>
        /// <param name="bestPrice">bestPrice.</param>
        /// <param name="currency">currency.</param>
        /// <param name="flightNeedExchangeDocuments">flightNeedExchangeDocuments.</param>
        /// <param name="groupOfFlights">groupOfFlights.</param>
        /// <param name="isDomesticFlight">isDomesticFlight.</param>
        /// <param name="recommendations">recommendations.</param>
        public FlightAvailability(List<FlightAirline> airlineDictionary = default(List<FlightAirline>), List<FlightAirport> airportDictionary = default(List<FlightAirport>), int? bestPrice = default(int?), string currency = default(string), bool? flightNeedExchangeDocuments = default(bool?), FlightAvailabilityGroupOfFlights groupOfFlights = default(FlightAvailabilityGroupOfFlights), bool? isDomesticFlight = default(bool?), List<FlightRecommendation> recommendations = default(List<FlightRecommendation>))
        {
            this.AirlineDictionary = airlineDictionary;
            this.AirportDictionary = airportDictionary;
            this.BestPrice = bestPrice;
            this.Currency = currency;
            this.FlightNeedExchangeDocuments = flightNeedExchangeDocuments;
            this.GroupOfFlights = groupOfFlights;
            this.IsDomesticFlight = isDomesticFlight;
            this.Recommendations = recommendations;
        }
        
        /// <summary>
        /// Gets or Sets AirlineDictionary
        /// </summary>
        [DataMember(Name="airlineDictionary", EmitDefaultValue=false)]
        public List<FlightAirline> AirlineDictionary { get; set; }

        /// <summary>
        /// Gets or Sets AirportDictionary
        /// </summary>
        [DataMember(Name="airportDictionary", EmitDefaultValue=false)]
        public List<FlightAirport> AirportDictionary { get; set; }

        /// <summary>
        /// Gets or Sets BestPrice
        /// </summary>
        [DataMember(Name="bestPrice", EmitDefaultValue=false)]
        public int? BestPrice { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets FlightNeedExchangeDocuments
        /// </summary>
        [DataMember(Name="flightNeedExchangeDocuments", EmitDefaultValue=false)]
        public bool? FlightNeedExchangeDocuments { get; set; }

        /// <summary>
        /// Gets or Sets GroupOfFlights
        /// </summary>
        [DataMember(Name="groupOfFlights", EmitDefaultValue=false)]
        public FlightAvailabilityGroupOfFlights GroupOfFlights { get; set; }

        /// <summary>
        /// Gets or Sets IsDomesticFlight
        /// </summary>
        [DataMember(Name="isDomesticFlight", EmitDefaultValue=false)]
        public bool? IsDomesticFlight { get; set; }

        /// <summary>
        /// Gets or Sets Recommendations
        /// </summary>
        [DataMember(Name="recommendations", EmitDefaultValue=false)]
        public List<FlightRecommendation> Recommendations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightAvailability {\n");
            sb.Append("  AirlineDictionary: ").Append(AirlineDictionary).Append("\n");
            sb.Append("  AirportDictionary: ").Append(AirportDictionary).Append("\n");
            sb.Append("  BestPrice: ").Append(BestPrice).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  FlightNeedExchangeDocuments: ").Append(FlightNeedExchangeDocuments).Append("\n");
            sb.Append("  GroupOfFlights: ").Append(GroupOfFlights).Append("\n");
            sb.Append("  IsDomesticFlight: ").Append(IsDomesticFlight).Append("\n");
            sb.Append("  Recommendations: ").Append(Recommendations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightAvailability);
        }

        /// <summary>
        /// Returns true if FlightAvailability instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightAvailability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightAvailability input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AirlineDictionary == input.AirlineDictionary ||
                    this.AirlineDictionary != null &&
                    input.AirlineDictionary != null &&
                    this.AirlineDictionary.SequenceEqual(input.AirlineDictionary)
                ) && 
                (
                    this.AirportDictionary == input.AirportDictionary ||
                    this.AirportDictionary != null &&
                    input.AirportDictionary != null &&
                    this.AirportDictionary.SequenceEqual(input.AirportDictionary)
                ) && 
                (
                    this.BestPrice == input.BestPrice ||
                    (this.BestPrice != null &&
                    this.BestPrice.Equals(input.BestPrice))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.FlightNeedExchangeDocuments == input.FlightNeedExchangeDocuments ||
                    (this.FlightNeedExchangeDocuments != null &&
                    this.FlightNeedExchangeDocuments.Equals(input.FlightNeedExchangeDocuments))
                ) && 
                (
                    this.GroupOfFlights == input.GroupOfFlights ||
                    (this.GroupOfFlights != null &&
                    this.GroupOfFlights.Equals(input.GroupOfFlights))
                ) && 
                (
                    this.IsDomesticFlight == input.IsDomesticFlight ||
                    (this.IsDomesticFlight != null &&
                    this.IsDomesticFlight.Equals(input.IsDomesticFlight))
                ) && 
                (
                    this.Recommendations == input.Recommendations ||
                    this.Recommendations != null &&
                    input.Recommendations != null &&
                    this.Recommendations.SequenceEqual(input.Recommendations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AirlineDictionary != null)
                    hashCode = hashCode * 59 + this.AirlineDictionary.GetHashCode();
                if (this.AirportDictionary != null)
                    hashCode = hashCode * 59 + this.AirportDictionary.GetHashCode();
                if (this.BestPrice != null)
                    hashCode = hashCode * 59 + this.BestPrice.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.FlightNeedExchangeDocuments != null)
                    hashCode = hashCode * 59 + this.FlightNeedExchangeDocuments.GetHashCode();
                if (this.GroupOfFlights != null)
                    hashCode = hashCode * 59 + this.GroupOfFlights.GetHashCode();
                if (this.IsDomesticFlight != null)
                    hashCode = hashCode * 59 + this.IsDomesticFlight.GetHashCode();
                if (this.Recommendations != null)
                    hashCode = hashCode * 59 + this.Recommendations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
